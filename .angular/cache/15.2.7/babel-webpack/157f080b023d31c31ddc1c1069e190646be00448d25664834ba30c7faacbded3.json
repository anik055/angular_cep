{"ast":null,"code":"import { CSInterface } from '@cep/csinterface';\nimport * as i0 from \"@angular/core\";\nexport class AlertService {\n  constructor() {\n    this.csInterface = new CSInterface();\n  }\n  custom() {\n    try {\n      // Your ExtendScript code here\n    } catch (error) {\n      alert(\"Error occurred: \" + error);\n    }\n  }\n  showAlert() {\n    // this.csInterface.evalScript('alert(\"Hello from CEP extension!\")', (result:any) => {\n    //     console.log('Alert shown');\n    //   });\n    this.csInterface.evalScript(\"custom()\", function (results) {\n      console.log(\"Number of open documents: \" + results);\n    });\n  }\n}\nAlertService.ɵfac = function AlertService_Factory(t) {\n  return new (t || AlertService)();\n};\nAlertService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AlertService,\n  factory: AlertService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,QAAQ,kBAAkB;;AAK9C,OAAM,MAAOC,YAAY;EAGvBC;IACE,IAAI,CAACC,WAAW,GAAG,IAAIH,WAAW,EAAE;EACtC;EAEAI,MAAM;IACJ,IAAI;MACA;IAAA,CACD,CAAC,OAAOC,KAAK,EAAE;MACdC,KAAK,CAAC,kBAAkB,GAAGD,KAAK,CAAC;;EAEvC;EAEAE,SAAS;IACP;IACA;IACA;IACA,IAAI,CAACJ,WAAW,CAACK,UAAU,CAAC,UAAU,EAAE,UAAUC,OAAW;MACzDC,OAAO,CAACC,GAAG,CAAC,4BAA4B,GAAGF,OAAO,CAAC;IACrD,CAAC,CAAC;EACN;;AAtBWR,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAW,SAAZX,YAAY;EAAAY,YAFX;AAAM","names":["CSInterface","AlertService","constructor","csInterface","custom","error","alert","showAlert","evalScript","results","console","log","factory","providedIn"],"sourceRoot":"","sources":["/Library/Application Support/Adobe/CEP/extensions/angular_cep_practice-main/src/app/common/alert/alert.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CSInterface } from '@cep/csinterface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertService {\n  private csInterface: CSInterface;\n\n  constructor() {\n    this.csInterface = new CSInterface();\n  }\n\n  custom(){\n    try {\n        // Your ExtendScript code here\n      } catch (error) {\n        alert(\"Error occurred: \" + error);\n      }\n  }\n\n  showAlert(): void {\n    // this.csInterface.evalScript('alert(\"Hello from CEP extension!\")', (result:any) => {\n    //     console.log('Alert shown');\n    //   });\n    this.csInterface.evalScript(\"custom()\", function (results:any) {\n        console.log(\"Number of open documents: \" + results);\n      });\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}