{"ast":null,"code":"/**************************************************************************************************\n*\n* ADOBE SYSTEMS INCORPORATED\n* Copyright 2020 Adobe Systems Incorporated\n* All Rights Reserved.\n*\n* NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the\n* terms of the Adobe license agreement accompanying it.  If you have received this file from a\n* source other than Adobe, then your use, modification, or distribution of it requires the prior\n* written permission of Adobe.\n*\n**************************************************************************************************/\n\n/** CSInterface - v10.0.0 */\n\n/**\n * Stores constants for the window types supported by the CSXS infrastructure.\n */\nfunction CSXSWindowType() {}\n\n/** Constant for the CSXS window type Panel. */\nCSXSWindowType._PANEL = \"Panel\";\n\n/** Constant for the CSXS window type Modeless. */\nCSXSWindowType._MODELESS = \"Modeless\";\n\n/** Constant for the CSXS window type ModalDialog. */\nCSXSWindowType._MODAL_DIALOG = \"ModalDialog\";\n\n/** EvalScript error message */\nEvalScript_ErrMessage = \"EvalScript error.\";\n\n/**\n * @class Version\n * Defines a version number with major, minor, micro, and special\n * components. The major, minor and micro values are numeric; the special\n * value can be any string.\n *\n * @param major   The major version component, a positive integer up to nine digits long.\n * @param minor   The minor version component, a positive integer up to nine digits long.\n * @param micro   The micro version component, a positive integer up to nine digits long.\n * @param special The special version component, an arbitrary string.\n *\n * @return A new \\c Version object.\n */\nfunction Version(major, minor, micro, special) {\n  this.major = major;\n  this.minor = minor;\n  this.micro = micro;\n  this.special = special;\n}\n\n/**\n * The maximum value allowed for a numeric version component.\n * This reflects the maximum value allowed in PlugPlug and the manifest schema.\n */\nVersion.MAX_NUM = 999999999;\n\n/**\n * @class VersionBound\n * Defines a boundary for a version range, which associates a \\c Version object\n * with a flag for whether it is an inclusive or exclusive boundary.\n *\n * @param version   The \\c #Version object.\n * @param inclusive True if this boundary is inclusive, false if it is exclusive.\n *\n * @return A new \\c VersionBound object.\n */\nfunction VersionBound(version, inclusive) {\n  this.version = version;\n  this.inclusive = inclusive;\n}\n\n/**\n * @class VersionRange\n * Defines a range of versions using a lower boundary and optional upper boundary.\n *\n * @param lowerBound The \\c #VersionBound object.\n * @param upperBound The \\c #VersionBound object, or null for a range with no upper boundary.\n *\n * @return A new \\c VersionRange object.\n */\nfunction VersionRange(lowerBound, upperBound) {\n  this.lowerBound = lowerBound;\n  this.upperBound = upperBound;\n}\n\n/**\n * @class Runtime\n * Represents a runtime related to the CEP infrastructure.\n * Extensions can declare dependencies on particular\n * CEP runtime versions in the extension manifest.\n *\n * @param name    The runtime name.\n * @param version A \\c #VersionRange object that defines a range of valid versions.\n *\n * @return A new \\c Runtime object.\n */\nfunction Runtime(name, versionRange) {\n  this.name = name;\n  this.versionRange = versionRange;\n}\n\n/**\n* @class Extension\n* Encapsulates a CEP-based extension to an Adobe application.\n*\n* @param id              The unique identifier of this extension.\n* @param name            The localizable display name of this extension.\n* @param mainPath        The path of the \"index.html\" file.\n* @param basePath        The base path of this extension.\n* @param windowType          The window type of the main window of this extension.\n                 Valid values are defined by \\c #CSXSWindowType.\n* @param width           The default width in pixels of the main window of this extension.\n* @param height          The default height in pixels of the main window of this extension.\n* @param minWidth        The minimum width in pixels of the main window of this extension.\n* @param minHeight       The minimum height in pixels of the main window of this extension.\n* @param maxWidth        The maximum width in pixels of the main window of this extension.\n* @param maxHeight       The maximum height in pixels of the main window of this extension.\n* @param defaultExtensionDataXml The extension data contained in the default \\c ExtensionDispatchInfo section of the extension manifest.\n* @param specialExtensionDataXml The extension data contained in the application-specific \\c ExtensionDispatchInfo section of the extension manifest.\n* @param requiredRuntimeList     An array of \\c Runtime objects for runtimes required by this extension.\n* @param isAutoVisible       True if this extension is visible on loading.\n* @param isPluginExtension   True if this extension has been deployed in the Plugins folder of the host application.\n*\n* @return A new \\c Extension object.\n*/\nfunction Extension(id, name, mainPath, basePath, windowType, width, height, minWidth, minHeight, maxWidth, maxHeight, defaultExtensionDataXml, specialExtensionDataXml, requiredRuntimeList, isAutoVisible, isPluginExtension) {\n  this.id = id;\n  this.name = name;\n  this.mainPath = mainPath;\n  this.basePath = basePath;\n  this.windowType = windowType;\n  this.width = width;\n  this.height = height;\n  this.minWidth = minWidth;\n  this.minHeight = minHeight;\n  this.maxWidth = maxWidth;\n  this.maxHeight = maxHeight;\n  this.defaultExtensionDataXml = defaultExtensionDataXml;\n  this.specialExtensionDataXml = specialExtensionDataXml;\n  this.requiredRuntimeList = requiredRuntimeList;\n  this.isAutoVisible = isAutoVisible;\n  this.isPluginExtension = isPluginExtension;\n}\n\n/**\n * @class CSEvent\n * A standard JavaScript event, the base class for CEP events.\n *\n * @param type        The name of the event type.\n * @param scope       The scope of event, can be \"GLOBAL\" or \"APPLICATION\".\n * @param appId       The unique identifier of the application that generated the event.\n * @param extensionId     The unique identifier of the extension that generated the event.\n *\n * @return A new \\c CSEvent object\n */\nfunction CSEvent(type, scope, appId, extensionId) {\n  this.type = type;\n  this.scope = scope;\n  this.appId = appId;\n  this.extensionId = extensionId;\n}\n\n/** Event-specific data. */\nCSEvent.prototype.data = \"\";\n\n/**\n * @class SystemPath\n * Stores operating-system-specific location constants for use in the\n * \\c #CSInterface.getSystemPath() method.\n * @return A new \\c SystemPath object.\n */\nfunction SystemPath() {}\n\n/** The path to user data.  */\nSystemPath.USER_DATA = \"userData\";\n\n/** The path to common files for Adobe applications.  */\nSystemPath.COMMON_FILES = \"commonFiles\";\n\n/** The path to the user's default document folder.  */\nSystemPath.MY_DOCUMENTS = \"myDocuments\";\n\n/** @deprecated. Use \\c #SystemPath.Extension.  */\nSystemPath.APPLICATION = \"application\";\n\n/** The path to current extension.  */\nSystemPath.EXTENSION = \"extension\";\n\n/** The path to hosting application's executable.  */\nSystemPath.HOST_APPLICATION = \"hostApplication\";\n\n/**\n * @class ColorType\n * Stores color-type constants.\n */\nfunction ColorType() {}\n\n/** RGB color type. */\nColorType.RGB = \"rgb\";\n\n/** Gradient color type. */\nColorType.GRADIENT = \"gradient\";\n\n/** Null color type. */\nColorType.NONE = \"none\";\n\n/**\n * @class RGBColor\n * Stores an RGB color with red, green, blue, and alpha values.\n * All values are in the range [0.0 to 255.0]. Invalid numeric values are\n * converted to numbers within this range.\n *\n * @param red   The red value, in the range [0.0 to 255.0].\n * @param green The green value, in the range [0.0 to 255.0].\n * @param blue  The blue value, in the range [0.0 to 255.0].\n * @param alpha The alpha (transparency) value, in the range [0.0 to 255.0].\n *      The default, 255.0, means that the color is fully opaque.\n *\n * @return A new RGBColor object.\n */\nfunction RGBColor(red, green, blue, alpha) {\n  this.red = red;\n  this.green = green;\n  this.blue = blue;\n  this.alpha = alpha;\n}\n\n/**\n * @class Direction\n * A point value  in which the y component is 0 and the x component\n * is positive or negative for a right or left direction,\n * or the x component is 0 and the y component is positive or negative for\n * an up or down direction.\n *\n * @param x     The horizontal component of the point.\n * @param y     The vertical component of the point.\n *\n * @return A new \\c Direction object.\n */\nfunction Direction(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\n/**\n * @class GradientStop\n * Stores gradient stop information.\n *\n * @param offset   The offset of the gradient stop, in the range [0.0 to 1.0].\n * @param rgbColor The color of the gradient at this point, an \\c #RGBColor object.\n *\n * @return GradientStop object.\n */\nfunction GradientStop(offset, rgbColor) {\n  this.offset = offset;\n  this.rgbColor = rgbColor;\n}\n\n/**\n * @class GradientColor\n * Stores gradient color information.\n *\n * @param type          The gradient type, must be \"linear\".\n * @param direction     A \\c #Direction object for the direction of the gradient\n                (up, down, right, or left).\n * @param numStops          The number of stops in the gradient.\n * @param gradientStopList  An array of \\c #GradientStop objects.\n *\n * @return A new \\c GradientColor object.\n */\nfunction GradientColor(type, direction, numStops, arrGradientStop) {\n  this.type = type;\n  this.direction = direction;\n  this.numStops = numStops;\n  this.arrGradientStop = arrGradientStop;\n}\n\n/**\n * @class UIColor\n * Stores color information, including the type, anti-alias level, and specific color\n * values in a color object of an appropriate type.\n *\n * @param type          The color type, 1 for \"rgb\" and 2 for \"gradient\".\n                The supplied color object must correspond to this type.\n * @param antialiasLevel    The anti-alias level constant.\n * @param color         A \\c #RGBColor or \\c #GradientColor object containing specific color information.\n *\n * @return A new \\c UIColor object.\n */\nfunction UIColor(type, antialiasLevel, color) {\n  this.type = type;\n  this.antialiasLevel = antialiasLevel;\n  this.color = color;\n}\n\n/**\n * @class AppSkinInfo\n * Stores window-skin properties, such as color and font. All color parameter values are \\c #UIColor objects except that systemHighlightColor is \\c #RGBColor object.\n *\n * @param baseFontFamily        The base font family of the application.\n * @param baseFontSize          The base font size of the application.\n * @param appBarBackgroundColor     The application bar background color.\n * @param panelBackgroundColor      The background color of the extension panel.\n * @param appBarBackgroundColorSRGB     The application bar background color, as sRGB.\n * @param panelBackgroundColorSRGB      The background color of the extension panel, as sRGB.\n * @param systemHighlightColor          The highlight color of the extension panel, if provided by the host application. Otherwise, the operating-system highlight color.\n *\n * @return AppSkinInfo object.\n */\nfunction AppSkinInfo(baseFontFamily, baseFontSize, appBarBackgroundColor, panelBackgroundColor, appBarBackgroundColorSRGB, panelBackgroundColorSRGB, systemHighlightColor) {\n  this.baseFontFamily = baseFontFamily;\n  this.baseFontSize = baseFontSize;\n  this.appBarBackgroundColor = appBarBackgroundColor;\n  this.panelBackgroundColor = panelBackgroundColor;\n  this.appBarBackgroundColorSRGB = appBarBackgroundColorSRGB;\n  this.panelBackgroundColorSRGB = panelBackgroundColorSRGB;\n  this.systemHighlightColor = systemHighlightColor;\n}\n\n/**\n * @class HostEnvironment\n * Stores information about the environment in which the extension is loaded.\n *\n * @param appName   The application's name.\n * @param appVersion    The application's version.\n * @param appLocale The application's current license locale.\n * @param appUILocale   The application's current UI locale.\n * @param appId     The application's unique identifier.\n * @param isAppOnline  True if the application is currently online.\n * @param appSkinInfo   An \\c #AppSkinInfo object containing the application's default color and font styles.\n *\n * @return A new \\c HostEnvironment object.\n */\nfunction HostEnvironment(appName, appVersion, appLocale, appUILocale, appId, isAppOnline, appSkinInfo) {\n  this.appName = appName;\n  this.appVersion = appVersion;\n  this.appLocale = appLocale;\n  this.appUILocale = appUILocale;\n  this.appId = appId;\n  this.isAppOnline = isAppOnline;\n  this.appSkinInfo = appSkinInfo;\n}\n\n/**\n * @class HostCapabilities\n * Stores information about the host capabilities.\n *\n * @param EXTENDED_PANEL_MENU True if the application supports panel menu.\n * @param EXTENDED_PANEL_ICONS True if the application supports panel icon.\n * @param DELEGATE_APE_ENGINE True if the application supports delegated APE engine.\n * @param SUPPORT_HTML_EXTENSIONS True if the application supports HTML extensions.\n * @param DISABLE_FLASH_EXTENSIONS True if the application disables FLASH extensions.\n *\n * @return A new \\c HostCapabilities object.\n */\nfunction HostCapabilities(EXTENDED_PANEL_MENU, EXTENDED_PANEL_ICONS, DELEGATE_APE_ENGINE, SUPPORT_HTML_EXTENSIONS, DISABLE_FLASH_EXTENSIONS) {\n  this.EXTENDED_PANEL_MENU = EXTENDED_PANEL_MENU;\n  this.EXTENDED_PANEL_ICONS = EXTENDED_PANEL_ICONS;\n  this.DELEGATE_APE_ENGINE = DELEGATE_APE_ENGINE;\n  this.SUPPORT_HTML_EXTENSIONS = SUPPORT_HTML_EXTENSIONS;\n  this.DISABLE_FLASH_EXTENSIONS = DISABLE_FLASH_EXTENSIONS; // Since 5.0.0\n}\n\n/**\n * @class ApiVersion\n * Stores current api version.\n *\n * Since 4.2.0\n *\n * @param major  The major version\n * @param minor  The minor version.\n * @param micro  The micro version.\n *\n * @return ApiVersion object.\n */\nfunction ApiVersion(major, minor, micro) {\n  this.major = major;\n  this.minor = minor;\n  this.micro = micro;\n}\n\n/**\n * @class MenuItemStatus\n * Stores flyout menu item status\n *\n * Since 5.2.0\n *\n * @param menuItemLabel  The menu item label.\n * @param enabled        True if user wants to enable the menu item.\n * @param checked        True if user wants to check the menu item.\n *\n * @return MenuItemStatus object.\n */\nfunction MenuItemStatus(menuItemLabel, enabled, checked) {\n  this.menuItemLabel = menuItemLabel;\n  this.enabled = enabled;\n  this.checked = checked;\n}\n\n/**\n * @class ContextMenuItemStatus\n * Stores the status of the context menu item.\n *\n * Since 5.2.0\n *\n * @param menuItemID     The menu item id.\n * @param enabled        True if user wants to enable the menu item.\n * @param checked        True if user wants to check the menu item.\n *\n * @return MenuItemStatus object.\n */\nfunction ContextMenuItemStatus(menuItemID, enabled, checked) {\n  this.menuItemID = menuItemID;\n  this.enabled = enabled;\n  this.checked = checked;\n}\n//------------------------------ CSInterface ----------------------------------\n\n/**\n * @class CSInterface\n * This is the entry point to the CEP extensibility infrastructure.\n * Instantiate this object and use it to:\n * <ul>\n * <li>Access information about the host application in which an extension is running</li>\n * <li>Launch an extension</li>\n * <li>Register interest in event notifications, and dispatch events</li>\n * </ul>\n *\n * @return A new \\c CSInterface object\n */\nfunction CSInterface() {}\n\n/**\n * User can add this event listener to handle native application theme color changes.\n * Callback function gives extensions ability to fine-tune their theme color after the\n * global theme color has been changed.\n * The callback function should be like below:\n *\n * @example\n * // event is a CSEvent object, but user can ignore it.\n * function OnAppThemeColorChanged(event)\n * {\n *    // Should get a latest HostEnvironment object from application.\n *    var skinInfo = JSON.parse(window.__adobe_cep__.getHostEnvironment()).appSkinInfo;\n *    // Gets the style information such as color info from the skinInfo,\n *    // and redraw all UI controls of your extension according to the style info.\n * }\n */\nCSInterface.THEME_COLOR_CHANGED_EVENT = \"com.adobe.csxs.events.ThemeColorChanged\";\n\n/** The host environment data object. */\nCSInterface.prototype.hostEnvironment = window.__adobe_cep__ ? JSON.parse(window.__adobe_cep__.getHostEnvironment()) : null;\n\n/** Retrieves information about the host environment in which the\n *  extension is currently running.\n *\n *   @return A \\c #HostEnvironment object.\n */\nCSInterface.prototype.getHostEnvironment = function () {\n  this.hostEnvironment = JSON.parse(window.__adobe_cep__.getHostEnvironment());\n  return this.hostEnvironment;\n};\n\n/** Loads binary file created which is located at url asynchronously\n*\n*@param urlName url at which binary file is located. Local files should start with 'file://'\n*@param callback Optional. A callback function that returns after binary is loaded\n\n*@example\n* To create JS binary use command ./cep_compiler test.js test.bin\n* To load JS binary asyncronously\n*   var CSLib = new CSInterface();\n*   CSLib.loadBinAsync(url, function () { });\n*/\nCSInterface.prototype.loadBinAsync = function (urlName, callback) {\n  try {\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = 'arraybuffer'; // make response as ArrayBuffer\n    xhr.open('GET', urlName, true);\n    xhr.onerror = function () {\n      console.log(\"Unable to load snapshot from given URL\");\n      return false;\n    };\n    xhr.send();\n    xhr.onload = () => {\n      window.__adobe_cep__.loadSnapshot(xhr.response);\n      if (typeof callback === \"function\") {\n        callback();\n      } else if (typeof callback !== \"undefined\") {\n        console.log(\"Provided callback is not a function\");\n      }\n    };\n  } catch (err) {\n    console.log(err);\n    return false;\n  }\n  return true;\n};\n\n/** Loads binary file created synchronously\n*\n*@param pathName the local path at which binary file is located\n\n*@example\n* To create JS binary use command ./cep_compiler test.js test.bin\n* To load JS binary syncronously\n*   var CSLib = new CSInterface();\n*   CSLib.loadBinSync(path);\n*/\nCSInterface.prototype.loadBinSync = function (pathName) {\n  try {\n    var OSVersion = this.getOSInformation();\n    if (pathName.startsWith(\"file://\")) {\n      if (OSVersion.indexOf(\"Windows\") >= 0) {\n        pathName = pathName.replace(\"file:///\", \"\");\n      } else if (OSVersion.indexOf(\"Mac\") >= 0) {\n        pathName = pathName.replace(\"file://\", \"\");\n      }\n      window.__adobe_cep__.loadSnapshot(pathName);\n      return true;\n    }\n  } catch (err) {\n    console.log(err);\n    return false;\n  }\n  //control should not come here\n  return false;\n};\n\n/** Closes this extension. */\nCSInterface.prototype.closeExtension = function () {\n  window.__adobe_cep__.closeExtension();\n};\n\n/**\n * Retrieves a path for which a constant is defined in the system.\n *\n * @param pathType The path-type constant defined in \\c #SystemPath ,\n *\n * @return The platform-specific system path string.\n */\nCSInterface.prototype.getSystemPath = function (pathType) {\n  var path = decodeURI(window.__adobe_cep__.getSystemPath(pathType));\n  var OSVersion = this.getOSInformation();\n  if (OSVersion.indexOf(\"Windows\") >= 0) {\n    path = path.replace(\"file:///\", \"\");\n  } else if (OSVersion.indexOf(\"Mac\") >= 0) {\n    path = path.replace(\"file://\", \"\");\n  }\n  return path;\n};\n\n/**\n * Evaluates a JavaScript script, which can use the JavaScript DOM\n * of the host application.\n *\n * @param script    The JavaScript script.\n * @param callback  Optional. A callback function that receives the result of execution.\n *          If execution fails, the callback function receives the error message \\c EvalScript_ErrMessage.\n */\nCSInterface.prototype.evalScript = function (script, callback) {\n  if (callback === null || callback === undefined) {\n    callback = function (result) {};\n  }\n  window.__adobe_cep__.evalScript(script, callback);\n};\n\n/**\n * Retrieves the unique identifier of the application.\n * in which the extension is currently running.\n *\n * @return The unique ID string.\n */\nCSInterface.prototype.getApplicationID = function () {\n  var appId = this.hostEnvironment.appId;\n  return appId;\n};\n\n/**\n * Retrieves host capability information for the application\n * in which the extension is currently running.\n *\n * @return A \\c #HostCapabilities object.\n */\nCSInterface.prototype.getHostCapabilities = function () {\n  var hostCapabilities = JSON.parse(window.__adobe_cep__.getHostCapabilities());\n  return hostCapabilities;\n};\n\n/**\n * Triggers a CEP event programmatically. Yoy can use it to dispatch\n * an event of a predefined type, or of a type you have defined.\n *\n * @param event A \\c CSEvent object.\n */\nCSInterface.prototype.dispatchEvent = function (event) {\n  if (typeof event.data == \"object\") {\n    event.data = JSON.stringify(event.data);\n  }\n  window.__adobe_cep__.dispatchEvent(event);\n};\n\n/**\n * Registers an interest in a CEP event of a particular type, and\n * assigns an event handler.\n * The event infrastructure notifies your extension when events of this type occur,\n * passing the event object to the registered handler function.\n *\n * @param type     The name of the event type of interest.\n * @param listener The JavaScript handler function or method.\n * @param obj      Optional, the object containing the handler method, if any.\n *         Default is null.\n */\nCSInterface.prototype.addEventListener = function (type, listener, obj) {\n  window.__adobe_cep__.addEventListener(type, listener, obj);\n};\n\n/**\n * Removes a registered event listener.\n *\n * @param type      The name of the event type of interest.\n * @param listener  The JavaScript handler function or method that was registered.\n * @param obj       Optional, the object containing the handler method, if any.\n *          Default is null.\n */\nCSInterface.prototype.removeEventListener = function (type, listener, obj) {\n  window.__adobe_cep__.removeEventListener(type, listener, obj);\n};\n\n/**\n * Loads and launches another extension, or activates the extension if it is already loaded.\n *\n * @param extensionId       The extension's unique identifier.\n * @param startupParams     Not currently used, pass \"\".\n *\n * @example\n * To launch the extension \"help\" with ID \"HLP\" from this extension, call:\n * <code>requestOpenExtension(\"HLP\", \"\"); </code>\n *\n */\nCSInterface.prototype.requestOpenExtension = function (extensionId, params) {\n  window.__adobe_cep__.requestOpenExtension(extensionId, params);\n};\n\n/**\n * Retrieves the list of extensions currently loaded in the current host application.\n * The extension list is initialized once, and remains the same during the lifetime\n * of the CEP session.\n *\n * @param extensionIds  Optional, an array of unique identifiers for extensions of interest.\n *          If omitted, retrieves data for all extensions.\n *\n * @return Zero or more \\c #Extension objects.\n */\nCSInterface.prototype.getExtensions = function (extensionIds) {\n  var extensionIdsStr = JSON.stringify(extensionIds);\n  var extensionsStr = window.__adobe_cep__.getExtensions(extensionIdsStr);\n  var extensions = JSON.parse(extensionsStr);\n  return extensions;\n};\n\n/**\n * Retrieves network-related preferences.\n *\n * @return A JavaScript object containing network preferences.\n */\nCSInterface.prototype.getNetworkPreferences = function () {\n  var result = window.__adobe_cep__.getNetworkPreferences();\n  var networkPre = JSON.parse(result);\n  return networkPre;\n};\n\n/**\n * Initializes the resource bundle for this extension with property values\n * for the current application and locale.\n * To support multiple locales, you must define a property file for each locale,\n * containing keyed display-string values for that locale.\n * See localization documentation for Extension Builder and related products.\n *\n * Keys can be in the\n * form <code>key.value=\"localized string\"</code>, for use in HTML text elements.\n * For example, in this input element, the localized \\c key.value string is displayed\n * instead of the empty \\c value string:\n *\n * <code><input type=\"submit\" value=\"\" data-locale=\"key\"/></code>\n *\n * @return An object containing the resource bundle information.\n */\nCSInterface.prototype.initResourceBundle = function () {\n  var resourceBundle = JSON.parse(window.__adobe_cep__.initResourceBundle());\n  var resElms = document.querySelectorAll('[data-locale]');\n  for (var n = 0; n < resElms.length; n++) {\n    var resEl = resElms[n];\n    // Get the resource key from the element.\n    var resKey = resEl.getAttribute('data-locale');\n    if (resKey) {\n      // Get all the resources that start with the key.\n      for (var key in resourceBundle) {\n        if (key.indexOf(resKey) === 0) {\n          var resValue = resourceBundle[key];\n          if (key.length == resKey.length) {\n            resEl.innerHTML = resValue;\n          } else if ('.' == key.charAt(resKey.length)) {\n            var attrKey = key.substring(resKey.length + 1);\n            resEl[attrKey] = resValue;\n          }\n        }\n      }\n    }\n  }\n  return resourceBundle;\n};\n\n/**\n * Writes installation information to a file.\n *\n * @return The file path.\n */\nCSInterface.prototype.dumpInstallationInfo = function () {\n  return window.__adobe_cep__.dumpInstallationInfo();\n};\n\n/**\n * Retrieves version information for the current Operating System,\n * See http://www.useragentstring.com/pages/Chrome/ for Chrome \\c navigator.userAgent values.\n *\n * @return A string containing the OS version, or \"unknown Operation System\".\n * If user customizes the User Agent by setting CEF command parameter \"--user-agent\", only\n * \"Mac OS X\" or \"Windows\" will be returned.\n */\nCSInterface.prototype.getOSInformation = function () {\n  var userAgent = navigator.userAgent;\n  if (navigator.platform == \"Win32\" || navigator.platform == \"Windows\") {\n    var winVersion = \"Windows\";\n    var winBit = \"\";\n    if (userAgent.indexOf(\"Windows\") > -1) {\n      if (userAgent.indexOf(\"Windows NT 5.0\") > -1) {\n        winVersion = \"Windows 2000\";\n      } else if (userAgent.indexOf(\"Windows NT 5.1\") > -1) {\n        winVersion = \"Windows XP\";\n      } else if (userAgent.indexOf(\"Windows NT 5.2\") > -1) {\n        winVersion = \"Windows Server 2003\";\n      } else if (userAgent.indexOf(\"Windows NT 6.0\") > -1) {\n        winVersion = \"Windows Vista\";\n      } else if (userAgent.indexOf(\"Windows NT 6.1\") > -1) {\n        winVersion = \"Windows 7\";\n      } else if (userAgent.indexOf(\"Windows NT 6.2\") > -1) {\n        winVersion = \"Windows 8\";\n      } else if (userAgent.indexOf(\"Windows NT 6.3\") > -1) {\n        winVersion = \"Windows 8.1\";\n      } else if (userAgent.indexOf(\"Windows NT 10\") > -1) {\n        winVersion = \"Windows 10\";\n      }\n      if (userAgent.indexOf(\"WOW64\") > -1 || userAgent.indexOf(\"Win64\") > -1) {\n        winBit = \" 64-bit\";\n      } else {\n        winBit = \" 32-bit\";\n      }\n    }\n    return winVersion + winBit;\n  } else if (navigator.platform == \"MacIntel\" || navigator.platform == \"Macintosh\") {\n    var result = \"Mac OS X\";\n    if (userAgent.indexOf(\"Mac OS X\") > -1) {\n      result = userAgent.substring(userAgent.indexOf(\"Mac OS X\"), userAgent.indexOf(\")\"));\n      result = result.replace(/_/g, \".\");\n    }\n    return result;\n  }\n  return \"Unknown Operation System\";\n};\n\n/**\n * Opens a page in the default system browser.\n *\n * Since 4.2.0\n *\n * @param url  The URL of the page/file to open, or the email address.\n * Must use HTTP/HTTPS/file/mailto protocol. For example:\n *   \"http://www.adobe.com\"\n *   \"https://github.com\"\n *   \"file:///C:/log.txt\"\n *   \"mailto:test@adobe.com\"\n *\n * @return One of these error codes:\\n\n *      <ul>\\n\n *          <li>NO_ERROR - 0</li>\\n\n *          <li>ERR_UNKNOWN - 1</li>\\n\n *          <li>ERR_INVALID_PARAMS - 2</li>\\n\n *          <li>ERR_INVALID_URL - 201</li>\\n\n *      </ul>\\n\n */\nCSInterface.prototype.openURLInDefaultBrowser = function (url) {\n  return cep.util.openURLInDefaultBrowser(url);\n};\n\n/**\n * Retrieves extension ID.\n *\n * Since 4.2.0\n *\n * @return extension ID.\n */\nCSInterface.prototype.getExtensionID = function () {\n  return window.__adobe_cep__.getExtensionId();\n};\n\n/**\n * Retrieves the scale factor of screen.\n * On Windows platform, the value of scale factor might be different from operating system's scale factor,\n * since host application may use its self-defined scale factor.\n *\n * Since 4.2.0\n *\n * @return One of the following float number.\n *      <ul>\\n\n *          <li> -1.0 when error occurs </li>\\n\n *          <li> 1.0 means normal screen </li>\\n\n *          <li> >1.0 means HiDPI screen </li>\\n\n *      </ul>\\n\n */\nCSInterface.prototype.getScaleFactor = function () {\n  return window.__adobe_cep__.getScaleFactor();\n};\n\n/**\n * Retrieves the scale factor of Monitor.\n *\n * Since 8.5.0\n *\n * @return value >= 1.0f\n * only available for windows machine\n */\nif (navigator.appVersion.toLowerCase().indexOf(\"windows\") >= 0) {\n  CSInterface.prototype.getMonitorScaleFactor = function () {\n    return window.__adobe_cep__.getMonitorScaleFactor();\n  };\n}\n\n/**\n * Set a handler to detect any changes of scale factor. This only works on Mac.\n *\n * Since 4.2.0\n *\n * @param handler   The function to be called when scale factor is changed.\n *\n */\nCSInterface.prototype.setScaleFactorChangedHandler = function (handler) {\n  window.__adobe_cep__.setScaleFactorChangedHandler(handler);\n};\n\n/**\n * Retrieves current API version.\n *\n * Since 4.2.0\n *\n * @return ApiVersion object.\n *\n */\nCSInterface.prototype.getCurrentApiVersion = function () {\n  var apiVersion = JSON.parse(window.__adobe_cep__.getCurrentApiVersion());\n  return apiVersion;\n};\n\n/**\n * Set panel flyout menu by an XML.\n *\n * Since 5.2.0\n *\n * Register a callback function for \"com.adobe.csxs.events.flyoutMenuClicked\" to get notified when a\n * menu item is clicked.\n * The \"data\" attribute of event is an object which contains \"menuId\" and \"menuName\" attributes.\n *\n * Register callback functions for \"com.adobe.csxs.events.flyoutMenuOpened\" and \"com.adobe.csxs.events.flyoutMenuClosed\"\n * respectively to get notified when flyout menu is opened or closed.\n *\n * @param menu     A XML string which describes menu structure.\n * An example menu XML:\n * <Menu>\n *   <MenuItem Id=\"menuItemId1\" Label=\"TestExample1\" Enabled=\"true\" Checked=\"false\"/>\n *   <MenuItem Label=\"TestExample2\">\n *     <MenuItem Label=\"TestExample2-1\" >\n *       <MenuItem Label=\"TestExample2-1-1\" Enabled=\"false\" Checked=\"true\"/>\n *     </MenuItem>\n *     <MenuItem Label=\"TestExample2-2\" Enabled=\"true\" Checked=\"true\"/>\n *   </MenuItem>\n *   <MenuItem Label=\"---\" />\n *   <MenuItem Label=\"TestExample3\" Enabled=\"false\" Checked=\"false\"/>\n * </Menu>\n *\n */\nCSInterface.prototype.setPanelFlyoutMenu = function (menu) {\n  if (\"string\" != typeof menu) {\n    return;\n  }\n  window.__adobe_cep__.invokeSync(\"setPanelFlyoutMenu\", menu);\n};\n\n/**\n * Updates a menu item in the extension window's flyout menu, by setting the enabled\n * and selection status.\n *\n * Since 5.2.0\n *\n * @param menuItemLabel The menu item label.\n * @param enabled       True to enable the item, false to disable it (gray it out).\n * @param checked       True to select the item, false to deselect it.\n *\n * @return false when the host application does not support this functionality (HostCapabilities.EXTENDED_PANEL_MENU is false).\n *         Fails silently if menu label is invalid.\n *\n * @see HostCapabilities.EXTENDED_PANEL_MENU\n */\nCSInterface.prototype.updatePanelMenuItem = function (menuItemLabel, enabled, checked) {\n  var ret = false;\n  if (this.getHostCapabilities().EXTENDED_PANEL_MENU) {\n    var itemStatus = new MenuItemStatus(menuItemLabel, enabled, checked);\n    ret = window.__adobe_cep__.invokeSync(\"updatePanelMenuItem\", JSON.stringify(itemStatus));\n  }\n  return ret;\n};\n\n/**\n * Set context menu by XML string.\n *\n * Since 5.2.0\n *\n * There are a number of conventions used to communicate what type of menu item to create and how it should be handled.\n * - an item without menu ID or menu name is disabled and is not shown.\n * - if the item name is \"---\" (three hyphens) then it is treated as a separator. The menu ID in this case will always be NULL.\n * - Checkable attribute takes precedence over Checked attribute.\n * - a PNG icon. For optimal display results please supply a 16 x 16px icon as larger dimensions will increase the size of the menu item.\n     The Chrome extension contextMenus API was taken as a reference.\n     https://developer.chrome.com/extensions/contextMenus\n * - the items with icons and checkable items cannot coexist on the same menu level. The former take precedences over the latter.\n *\n * @param menu      A XML string which describes menu structure.\n * @param callback  The callback function which is called when a menu item is clicked. The only parameter is the returned ID of clicked menu item.\n *\n * @description An example menu XML:\n * <Menu>\n *   <MenuItem Id=\"menuItemId1\" Label=\"TestExample1\" Enabled=\"true\" Checkable=\"true\" Checked=\"false\" Icon=\"./image/small_16X16.png\"/>\n *   <MenuItem Id=\"menuItemId2\" Label=\"TestExample2\">\n *     <MenuItem Id=\"menuItemId2-1\" Label=\"TestExample2-1\" >\n *       <MenuItem Id=\"menuItemId2-1-1\" Label=\"TestExample2-1-1\" Enabled=\"false\" Checkable=\"true\" Checked=\"true\"/>\n *     </MenuItem>\n *     <MenuItem Id=\"menuItemId2-2\" Label=\"TestExample2-2\" Enabled=\"true\" Checkable=\"true\" Checked=\"true\"/>\n *   </MenuItem>\n *   <MenuItem Label=\"---\" />\n *   <MenuItem Id=\"menuItemId3\" Label=\"TestExample3\" Enabled=\"false\" Checkable=\"true\" Checked=\"false\"/>\n * </Menu>\n */\nCSInterface.prototype.setContextMenu = function (menu, callback) {\n  if (\"string\" != typeof menu) {\n    return;\n  }\n  window.__adobe_cep__.invokeAsync(\"setContextMenu\", menu, callback);\n};\n\n/**\n * Set context menu by JSON string.\n *\n * Since 6.0.0\n *\n * There are a number of conventions used to communicate what type of menu item to create and how it should be handled.\n * - an item without menu ID or menu name is disabled and is not shown.\n * - if the item label is \"---\" (three hyphens) then it is treated as a separator. The menu ID in this case will always be NULL.\n * - Checkable attribute takes precedence over Checked attribute.\n * - a PNG icon. For optimal display results please supply a 16 x 16px icon as larger dimensions will increase the size of the menu item.\n     The Chrome extension contextMenus API was taken as a reference.\n * - the items with icons and checkable items cannot coexist on the same menu level. The former take precedences over the latter.\n     https://developer.chrome.com/extensions/contextMenus\n *\n * @param menu      A JSON string which describes menu structure.\n * @param callback  The callback function which is called when a menu item is clicked. The only parameter is the returned ID of clicked menu item.\n *\n * @description An example menu JSON:\n *\n * {\n *      \"menu\": [\n *          {\n *              \"id\": \"menuItemId1\",\n *              \"label\": \"testExample1\",\n *              \"enabled\": true,\n *              \"checkable\": true,\n *              \"checked\": false,\n *              \"icon\": \"./image/small_16X16.png\"\n *          },\n *          {\n *              \"id\": \"menuItemId2\",\n *              \"label\": \"testExample2\",\n *              \"menu\": [\n *                  {\n *                      \"id\": \"menuItemId2-1\",\n *                      \"label\": \"testExample2-1\",\n *                      \"menu\": [\n *                          {\n *                              \"id\": \"menuItemId2-1-1\",\n *                              \"label\": \"testExample2-1-1\",\n *                              \"enabled\": false,\n *                              \"checkable\": true,\n *                              \"checked\": true\n *                          }\n *                      ]\n *                  },\n *                  {\n *                      \"id\": \"menuItemId2-2\",\n *                      \"label\": \"testExample2-2\",\n *                      \"enabled\": true,\n *                      \"checkable\": true,\n *                      \"checked\": true\n *                  }\n *              ]\n *          },\n *          {\n *              \"label\": \"---\"\n *          },\n *          {\n *              \"id\": \"menuItemId3\",\n *              \"label\": \"testExample3\",\n *              \"enabled\": false,\n *              \"checkable\": true,\n *              \"checked\": false\n *          }\n *      ]\n *  }\n *\n */\nCSInterface.prototype.setContextMenuByJSON = function (menu, callback) {\n  if (\"string\" != typeof menu) {\n    return;\n  }\n  window.__adobe_cep__.invokeAsync(\"setContextMenuByJSON\", menu, callback);\n};\n\n/**\n * Updates a context menu item by setting the enabled and selection status.\n *\n * Since 5.2.0\n *\n * @param menuItemID    The menu item ID.\n * @param enabled       True to enable the item, false to disable it (gray it out).\n * @param checked       True to select the item, false to deselect it.\n */\nCSInterface.prototype.updateContextMenuItem = function (menuItemID, enabled, checked) {\n  var itemStatus = new ContextMenuItemStatus(menuItemID, enabled, checked);\n  ret = window.__adobe_cep__.invokeSync(\"updateContextMenuItem\", JSON.stringify(itemStatus));\n};\n\n/**\n * Get the visibility status of an extension window.\n *\n * Since 6.0.0\n *\n * @return true if the extension window is visible; false if the extension window is hidden.\n */\nCSInterface.prototype.isWindowVisible = function () {\n  return window.__adobe_cep__.invokeSync(\"isWindowVisible\", \"\");\n};\n\n/**\n * Resize extension's content to the specified dimensions.\n * 1. Works with modal and modeless extensions in all Adobe products.\n * 2. Extension's manifest min/max size constraints apply and take precedence.\n * 3. For panel extensions\n *    3.1 This works in all Adobe products except:\n *        * Premiere Pro\n *        * Prelude\n *        * After Effects\n *    3.2 When the panel is in certain states (especially when being docked),\n *        it will not change to the desired dimensions even when the\n *        specified size satisfies min/max constraints.\n *\n * Since 6.0.0\n *\n * @param width  The new width\n * @param height The new height\n */\nCSInterface.prototype.resizeContent = function (width, height) {\n  window.__adobe_cep__.resizeContent(width, height);\n};\n\n/**\n * Register the invalid certificate callback for an extension.\n * This callback will be triggered when the extension tries to access the web site that contains the invalid certificate on the main frame.\n * But if the extension does not call this function and tries to access the web site containing the invalid certificate, a default error page will be shown.\n *\n * Since 6.1.0\n *\n * @param callback the callback function\n */\nCSInterface.prototype.registerInvalidCertificateCallback = function (callback) {\n  return window.__adobe_cep__.registerInvalidCertificateCallback(callback);\n};\n\n/**\n * Register an interest in some key events to prevent them from being sent to the host application.\n *\n * This function works with modeless extensions and panel extensions.\n * Generally all the key events will be sent to the host application for these two extensions if the current focused element\n * is not text input or dropdown,\n * If you want to intercept some key events and want them to be handled in the extension, please call this function\n * in advance to prevent them being sent to the host application.\n *\n * Since 6.1.0\n *\n * @param keyEventsInterest      A JSON string describing those key events you are interested in. A null object or\n                                 an empty string will lead to removing the interest\n *\n * This JSON string should be an array, each object has following keys:\n *\n * keyCode:  [Required] represents an OS system dependent virtual key code identifying\n *           the unmodified value of the pressed key.\n * ctrlKey:  [optional] a Boolean that indicates if the control key was pressed (true) or not (false) when the event occurred.\n * altKey:   [optional] a Boolean that indicates if the alt key was pressed (true) or not (false) when the event occurred.\n * shiftKey: [optional] a Boolean that indicates if the shift key was pressed (true) or not (false) when the event occurred.\n * metaKey:  [optional] (Mac Only) a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occurred.\n *                      On Macintosh keyboards, this is the command key. To detect Windows key on Windows, please use keyCode instead.\n * An example JSON string:\n *\n * [\n *     {\n *         \"keyCode\": 48\n *     },\n *     {\n *         \"keyCode\": 123,\n *         \"ctrlKey\": true\n *     },\n *     {\n *         \"keyCode\": 123,\n *         \"ctrlKey\": true,\n *         \"metaKey\": true\n *     }\n * ]\n *\n */\nCSInterface.prototype.registerKeyEventsInterest = function (keyEventsInterest) {\n  return window.__adobe_cep__.registerKeyEventsInterest(keyEventsInterest);\n};\n\n/**\n * Set the title of the extension window.\n * This function works with modal and modeless extensions in all Adobe products, and panel extensions in Photoshop, InDesign, InCopy, Illustrator, Flash Pro and Dreamweaver.\n *\n * Since 6.1.0\n *\n * @param title The window title.\n */\nCSInterface.prototype.setWindowTitle = function (title) {\n  window.__adobe_cep__.invokeSync(\"setWindowTitle\", title);\n};\n\n/**\n * Get the title of the extension window.\n * This function works with modal and modeless extensions in all Adobe products, and panel extensions in Photoshop, InDesign, InCopy, Illustrator, Flash Pro and Dreamweaver.\n *\n * Since 6.1.0\n *\n * @return The window title.\n */\nCSInterface.prototype.getWindowTitle = function () {\n  return window.__adobe_cep__.invokeSync(\"getWindowTitle\", \"\");\n};\n(function (_) {\n  if (typeof module !== \"undefined\" && module.exports) {\n    // commonjs\n    module.exports = _;\n  } else {\n    // browser\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    for (var key in _) {\n      if (hasOwnProperty.call(_, key)) {\n        window[key] = _[key];\n      }\n    }\n  }\n})({\n  CSXSWindowType: CSXSWindowType,\n  Version: Version,\n  VersionBound: VersionBound,\n  VersionRange: VersionRange,\n  Runtime: Runtime,\n  Extension: Extension,\n  CSEvent: CSEvent,\n  SystemPath: SystemPath,\n  ColorType: ColorType,\n  RGBColor: RGBColor,\n  Direction: Direction,\n  GradientStop: GradientStop,\n  GradientColor: GradientColor,\n  UIColor: UIColor,\n  AppSkinInfo: AppSkinInfo,\n  HostEnvironment: HostEnvironment,\n  HostCapabilities: HostCapabilities,\n  ApiVersion: ApiVersion,\n  MenuItemStatus: MenuItemStatus,\n  ContextMenuItemStatus: ContextMenuItemStatus,\n  CSInterface: CSInterface\n});","map":{"version":3,"names":["CSXSWindowType","_PANEL","_MODELESS","_MODAL_DIALOG","EvalScript_ErrMessage","Version","major","minor","micro","special","MAX_NUM","VersionBound","version","inclusive","VersionRange","lowerBound","upperBound","Runtime","name","versionRange","Extension","id","mainPath","basePath","windowType","width","height","minWidth","minHeight","maxWidth","maxHeight","defaultExtensionDataXml","specialExtensionDataXml","requiredRuntimeList","isAutoVisible","isPluginExtension","CSEvent","type","scope","appId","extensionId","prototype","data","SystemPath","USER_DATA","COMMON_FILES","MY_DOCUMENTS","APPLICATION","EXTENSION","HOST_APPLICATION","ColorType","RGB","GRADIENT","NONE","RGBColor","red","green","blue","alpha","Direction","x","y","GradientStop","offset","rgbColor","GradientColor","direction","numStops","arrGradientStop","UIColor","antialiasLevel","color","AppSkinInfo","baseFontFamily","baseFontSize","appBarBackgroundColor","panelBackgroundColor","appBarBackgroundColorSRGB","panelBackgroundColorSRGB","systemHighlightColor","HostEnvironment","appName","appVersion","appLocale","appUILocale","isAppOnline","appSkinInfo","HostCapabilities","EXTENDED_PANEL_MENU","EXTENDED_PANEL_ICONS","DELEGATE_APE_ENGINE","SUPPORT_HTML_EXTENSIONS","DISABLE_FLASH_EXTENSIONS","ApiVersion","MenuItemStatus","menuItemLabel","enabled","checked","ContextMenuItemStatus","menuItemID","CSInterface","THEME_COLOR_CHANGED_EVENT","hostEnvironment","window","__adobe_cep__","JSON","parse","getHostEnvironment","loadBinAsync","urlName","callback","xhr","XMLHttpRequest","responseType","open","onerror","console","log","send","onload","loadSnapshot","response","err","loadBinSync","pathName","OSVersion","getOSInformation","startsWith","indexOf","replace","closeExtension","getSystemPath","pathType","path","decodeURI","evalScript","script","undefined","result","getApplicationID","getHostCapabilities","hostCapabilities","dispatchEvent","event","stringify","addEventListener","listener","obj","removeEventListener","requestOpenExtension","params","getExtensions","extensionIds","extensionIdsStr","extensionsStr","extensions","getNetworkPreferences","networkPre","initResourceBundle","resourceBundle","resElms","document","querySelectorAll","n","length","resEl","resKey","getAttribute","key","resValue","innerHTML","charAt","attrKey","substring","dumpInstallationInfo","userAgent","navigator","platform","winVersion","winBit","openURLInDefaultBrowser","url","cep","util","getExtensionID","getExtensionId","getScaleFactor","toLowerCase","getMonitorScaleFactor","setScaleFactorChangedHandler","handler","getCurrentApiVersion","apiVersion","setPanelFlyoutMenu","menu","invokeSync","updatePanelMenuItem","ret","itemStatus","setContextMenu","invokeAsync","setContextMenuByJSON","updateContextMenuItem","isWindowVisible","resizeContent","registerInvalidCertificateCallback","registerKeyEventsInterest","keyEventsInterest","setWindowTitle","title","getWindowTitle","_","module","exports","hasOwnProperty","Object","call"],"sources":["/Library/Application Support/Adobe/CEP/extensions/angular_cep/node_modules/@cep/csinterface/lib/csinterface.js"],"sourcesContent":["/**************************************************************************************************\n*\n* ADOBE SYSTEMS INCORPORATED\n* Copyright 2020 Adobe Systems Incorporated\n* All Rights Reserved.\n*\n* NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the\n* terms of the Adobe license agreement accompanying it.  If you have received this file from a\n* source other than Adobe, then your use, modification, or distribution of it requires the prior\n* written permission of Adobe.\n*\n**************************************************************************************************/\n\n/** CSInterface - v10.0.0 */\n\n/**\n * Stores constants for the window types supported by the CSXS infrastructure.\n */\nfunction CSXSWindowType()\n{\n}\n\n/** Constant for the CSXS window type Panel. */\nCSXSWindowType._PANEL = \"Panel\";\n\n/** Constant for the CSXS window type Modeless. */\nCSXSWindowType._MODELESS = \"Modeless\";\n\n/** Constant for the CSXS window type ModalDialog. */\nCSXSWindowType._MODAL_DIALOG = \"ModalDialog\";\n\n/** EvalScript error message */\nEvalScript_ErrMessage = \"EvalScript error.\";\n\n/**\n * @class Version\n * Defines a version number with major, minor, micro, and special\n * components. The major, minor and micro values are numeric; the special\n * value can be any string.\n *\n * @param major   The major version component, a positive integer up to nine digits long.\n * @param minor   The minor version component, a positive integer up to nine digits long.\n * @param micro   The micro version component, a positive integer up to nine digits long.\n * @param special The special version component, an arbitrary string.\n *\n * @return A new \\c Version object.\n */\nfunction Version(major, minor, micro, special)\n{\n    this.major = major;\n    this.minor = minor;\n    this.micro = micro;\n    this.special = special;\n}\n\n/**\n * The maximum value allowed for a numeric version component.\n * This reflects the maximum value allowed in PlugPlug and the manifest schema.\n */\nVersion.MAX_NUM = 999999999;\n\n/**\n * @class VersionBound\n * Defines a boundary for a version range, which associates a \\c Version object\n * with a flag for whether it is an inclusive or exclusive boundary.\n *\n * @param version   The \\c #Version object.\n * @param inclusive True if this boundary is inclusive, false if it is exclusive.\n *\n * @return A new \\c VersionBound object.\n */\nfunction VersionBound(version, inclusive)\n{\n    this.version = version;\n    this.inclusive = inclusive;\n}\n\n/**\n * @class VersionRange\n * Defines a range of versions using a lower boundary and optional upper boundary.\n *\n * @param lowerBound The \\c #VersionBound object.\n * @param upperBound The \\c #VersionBound object, or null for a range with no upper boundary.\n *\n * @return A new \\c VersionRange object.\n */\nfunction VersionRange(lowerBound, upperBound)\n{\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n}\n\n/**\n * @class Runtime\n * Represents a runtime related to the CEP infrastructure.\n * Extensions can declare dependencies on particular\n * CEP runtime versions in the extension manifest.\n *\n * @param name    The runtime name.\n * @param version A \\c #VersionRange object that defines a range of valid versions.\n *\n * @return A new \\c Runtime object.\n */\nfunction Runtime(name, versionRange)\n{\n    this.name = name;\n    this.versionRange = versionRange;\n}\n\n/**\n* @class Extension\n* Encapsulates a CEP-based extension to an Adobe application.\n*\n* @param id              The unique identifier of this extension.\n* @param name            The localizable display name of this extension.\n* @param mainPath        The path of the \"index.html\" file.\n* @param basePath        The base path of this extension.\n* @param windowType          The window type of the main window of this extension.\n                 Valid values are defined by \\c #CSXSWindowType.\n* @param width           The default width in pixels of the main window of this extension.\n* @param height          The default height in pixels of the main window of this extension.\n* @param minWidth        The minimum width in pixels of the main window of this extension.\n* @param minHeight       The minimum height in pixels of the main window of this extension.\n* @param maxWidth        The maximum width in pixels of the main window of this extension.\n* @param maxHeight       The maximum height in pixels of the main window of this extension.\n* @param defaultExtensionDataXml The extension data contained in the default \\c ExtensionDispatchInfo section of the extension manifest.\n* @param specialExtensionDataXml The extension data contained in the application-specific \\c ExtensionDispatchInfo section of the extension manifest.\n* @param requiredRuntimeList     An array of \\c Runtime objects for runtimes required by this extension.\n* @param isAutoVisible       True if this extension is visible on loading.\n* @param isPluginExtension   True if this extension has been deployed in the Plugins folder of the host application.\n*\n* @return A new \\c Extension object.\n*/\nfunction Extension(id, name, mainPath, basePath, windowType, width, height, minWidth, minHeight, maxWidth, maxHeight,\n                   defaultExtensionDataXml, specialExtensionDataXml, requiredRuntimeList, isAutoVisible, isPluginExtension)\n{\n    this.id = id;\n    this.name = name;\n    this.mainPath = mainPath;\n    this.basePath = basePath;\n    this.windowType = windowType;\n    this.width = width;\n    this.height = height;\n    this.minWidth = minWidth;\n    this.minHeight = minHeight;\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this.defaultExtensionDataXml = defaultExtensionDataXml;\n    this.specialExtensionDataXml = specialExtensionDataXml;\n    this.requiredRuntimeList = requiredRuntimeList;\n    this.isAutoVisible = isAutoVisible;\n    this.isPluginExtension = isPluginExtension;\n}\n\n/**\n * @class CSEvent\n * A standard JavaScript event, the base class for CEP events.\n *\n * @param type        The name of the event type.\n * @param scope       The scope of event, can be \"GLOBAL\" or \"APPLICATION\".\n * @param appId       The unique identifier of the application that generated the event.\n * @param extensionId     The unique identifier of the extension that generated the event.\n *\n * @return A new \\c CSEvent object\n */\nfunction CSEvent(type, scope, appId, extensionId)\n{\n    this.type = type;\n    this.scope = scope;\n    this.appId = appId;\n    this.extensionId = extensionId;\n}\n\n/** Event-specific data. */\nCSEvent.prototype.data = \"\";\n\n/**\n * @class SystemPath\n * Stores operating-system-specific location constants for use in the\n * \\c #CSInterface.getSystemPath() method.\n * @return A new \\c SystemPath object.\n */\nfunction SystemPath()\n{\n}\n\n/** The path to user data.  */\nSystemPath.USER_DATA = \"userData\";\n\n/** The path to common files for Adobe applications.  */\nSystemPath.COMMON_FILES = \"commonFiles\";\n\n/** The path to the user's default document folder.  */\nSystemPath.MY_DOCUMENTS = \"myDocuments\";\n\n/** @deprecated. Use \\c #SystemPath.Extension.  */\nSystemPath.APPLICATION = \"application\";\n\n/** The path to current extension.  */\nSystemPath.EXTENSION = \"extension\";\n\n/** The path to hosting application's executable.  */\nSystemPath.HOST_APPLICATION = \"hostApplication\";\n\n/**\n * @class ColorType\n * Stores color-type constants.\n */\nfunction ColorType()\n{\n}\n\n/** RGB color type. */\nColorType.RGB = \"rgb\";\n\n/** Gradient color type. */\nColorType.GRADIENT = \"gradient\";\n\n/** Null color type. */\nColorType.NONE = \"none\";\n\n/**\n * @class RGBColor\n * Stores an RGB color with red, green, blue, and alpha values.\n * All values are in the range [0.0 to 255.0]. Invalid numeric values are\n * converted to numbers within this range.\n *\n * @param red   The red value, in the range [0.0 to 255.0].\n * @param green The green value, in the range [0.0 to 255.0].\n * @param blue  The blue value, in the range [0.0 to 255.0].\n * @param alpha The alpha (transparency) value, in the range [0.0 to 255.0].\n *      The default, 255.0, means that the color is fully opaque.\n *\n * @return A new RGBColor object.\n */\nfunction RGBColor(red, green, blue, alpha)\n{\n    this.red = red;\n    this.green = green;\n    this.blue = blue;\n    this.alpha = alpha;\n}\n\n/**\n * @class Direction\n * A point value  in which the y component is 0 and the x component\n * is positive or negative for a right or left direction,\n * or the x component is 0 and the y component is positive or negative for\n * an up or down direction.\n *\n * @param x     The horizontal component of the point.\n * @param y     The vertical component of the point.\n *\n * @return A new \\c Direction object.\n */\nfunction Direction(x, y)\n{\n    this.x = x;\n    this.y = y;\n}\n\n/**\n * @class GradientStop\n * Stores gradient stop information.\n *\n * @param offset   The offset of the gradient stop, in the range [0.0 to 1.0].\n * @param rgbColor The color of the gradient at this point, an \\c #RGBColor object.\n *\n * @return GradientStop object.\n */\nfunction GradientStop(offset, rgbColor)\n{\n    this.offset = offset;\n    this.rgbColor = rgbColor;\n}\n\n/**\n * @class GradientColor\n * Stores gradient color information.\n *\n * @param type          The gradient type, must be \"linear\".\n * @param direction     A \\c #Direction object for the direction of the gradient\n                (up, down, right, or left).\n * @param numStops          The number of stops in the gradient.\n * @param gradientStopList  An array of \\c #GradientStop objects.\n *\n * @return A new \\c GradientColor object.\n */\nfunction GradientColor(type, direction, numStops, arrGradientStop)\n{\n    this.type = type;\n    this.direction = direction;\n    this.numStops = numStops;\n    this.arrGradientStop = arrGradientStop;\n}\n\n/**\n * @class UIColor\n * Stores color information, including the type, anti-alias level, and specific color\n * values in a color object of an appropriate type.\n *\n * @param type          The color type, 1 for \"rgb\" and 2 for \"gradient\".\n                The supplied color object must correspond to this type.\n * @param antialiasLevel    The anti-alias level constant.\n * @param color         A \\c #RGBColor or \\c #GradientColor object containing specific color information.\n *\n * @return A new \\c UIColor object.\n */\nfunction UIColor(type, antialiasLevel, color)\n{\n    this.type = type;\n    this.antialiasLevel = antialiasLevel;\n    this.color = color;\n}\n\n/**\n * @class AppSkinInfo\n * Stores window-skin properties, such as color and font. All color parameter values are \\c #UIColor objects except that systemHighlightColor is \\c #RGBColor object.\n *\n * @param baseFontFamily        The base font family of the application.\n * @param baseFontSize          The base font size of the application.\n * @param appBarBackgroundColor     The application bar background color.\n * @param panelBackgroundColor      The background color of the extension panel.\n * @param appBarBackgroundColorSRGB     The application bar background color, as sRGB.\n * @param panelBackgroundColorSRGB      The background color of the extension panel, as sRGB.\n * @param systemHighlightColor          The highlight color of the extension panel, if provided by the host application. Otherwise, the operating-system highlight color.\n *\n * @return AppSkinInfo object.\n */\nfunction AppSkinInfo(baseFontFamily, baseFontSize, appBarBackgroundColor, panelBackgroundColor, appBarBackgroundColorSRGB, panelBackgroundColorSRGB, systemHighlightColor)\n{\n    this.baseFontFamily = baseFontFamily;\n    this.baseFontSize = baseFontSize;\n    this.appBarBackgroundColor = appBarBackgroundColor;\n    this.panelBackgroundColor = panelBackgroundColor;\n    this.appBarBackgroundColorSRGB = appBarBackgroundColorSRGB;\n    this.panelBackgroundColorSRGB = panelBackgroundColorSRGB;\n    this.systemHighlightColor = systemHighlightColor;\n}\n\n/**\n * @class HostEnvironment\n * Stores information about the environment in which the extension is loaded.\n *\n * @param appName   The application's name.\n * @param appVersion    The application's version.\n * @param appLocale The application's current license locale.\n * @param appUILocale   The application's current UI locale.\n * @param appId     The application's unique identifier.\n * @param isAppOnline  True if the application is currently online.\n * @param appSkinInfo   An \\c #AppSkinInfo object containing the application's default color and font styles.\n *\n * @return A new \\c HostEnvironment object.\n */\nfunction HostEnvironment(appName, appVersion, appLocale, appUILocale, appId, isAppOnline, appSkinInfo)\n{\n    this.appName = appName;\n    this.appVersion = appVersion;\n    this.appLocale = appLocale;\n    this.appUILocale = appUILocale;\n    this.appId = appId;\n    this.isAppOnline = isAppOnline;\n    this.appSkinInfo = appSkinInfo;\n}\n\n/**\n * @class HostCapabilities\n * Stores information about the host capabilities.\n *\n * @param EXTENDED_PANEL_MENU True if the application supports panel menu.\n * @param EXTENDED_PANEL_ICONS True if the application supports panel icon.\n * @param DELEGATE_APE_ENGINE True if the application supports delegated APE engine.\n * @param SUPPORT_HTML_EXTENSIONS True if the application supports HTML extensions.\n * @param DISABLE_FLASH_EXTENSIONS True if the application disables FLASH extensions.\n *\n * @return A new \\c HostCapabilities object.\n */\nfunction HostCapabilities(EXTENDED_PANEL_MENU, EXTENDED_PANEL_ICONS, DELEGATE_APE_ENGINE, SUPPORT_HTML_EXTENSIONS, DISABLE_FLASH_EXTENSIONS)\n{\n    this.EXTENDED_PANEL_MENU = EXTENDED_PANEL_MENU;\n    this.EXTENDED_PANEL_ICONS = EXTENDED_PANEL_ICONS;\n    this.DELEGATE_APE_ENGINE = DELEGATE_APE_ENGINE;\n    this.SUPPORT_HTML_EXTENSIONS = SUPPORT_HTML_EXTENSIONS;\n    this.DISABLE_FLASH_EXTENSIONS = DISABLE_FLASH_EXTENSIONS; // Since 5.0.0\n}\n\n/**\n * @class ApiVersion\n * Stores current api version.\n *\n * Since 4.2.0\n *\n * @param major  The major version\n * @param minor  The minor version.\n * @param micro  The micro version.\n *\n * @return ApiVersion object.\n */\nfunction ApiVersion(major, minor, micro)\n{\n    this.major = major;\n    this.minor = minor;\n    this.micro = micro;\n}\n\n/**\n * @class MenuItemStatus\n * Stores flyout menu item status\n *\n * Since 5.2.0\n *\n * @param menuItemLabel  The menu item label.\n * @param enabled        True if user wants to enable the menu item.\n * @param checked        True if user wants to check the menu item.\n *\n * @return MenuItemStatus object.\n */\nfunction MenuItemStatus(menuItemLabel, enabled, checked)\n{\n    this.menuItemLabel = menuItemLabel;\n    this.enabled = enabled;\n    this.checked = checked;\n}\n\n/**\n * @class ContextMenuItemStatus\n * Stores the status of the context menu item.\n *\n * Since 5.2.0\n *\n * @param menuItemID     The menu item id.\n * @param enabled        True if user wants to enable the menu item.\n * @param checked        True if user wants to check the menu item.\n *\n * @return MenuItemStatus object.\n */\nfunction ContextMenuItemStatus(menuItemID, enabled, checked)\n{\n    this.menuItemID = menuItemID;\n    this.enabled = enabled;\n    this.checked = checked;\n}\n//------------------------------ CSInterface ----------------------------------\n\n/**\n * @class CSInterface\n * This is the entry point to the CEP extensibility infrastructure.\n * Instantiate this object and use it to:\n * <ul>\n * <li>Access information about the host application in which an extension is running</li>\n * <li>Launch an extension</li>\n * <li>Register interest in event notifications, and dispatch events</li>\n * </ul>\n *\n * @return A new \\c CSInterface object\n */\nfunction CSInterface()\n{\n}\n\n/**\n * User can add this event listener to handle native application theme color changes.\n * Callback function gives extensions ability to fine-tune their theme color after the\n * global theme color has been changed.\n * The callback function should be like below:\n *\n * @example\n * // event is a CSEvent object, but user can ignore it.\n * function OnAppThemeColorChanged(event)\n * {\n *    // Should get a latest HostEnvironment object from application.\n *    var skinInfo = JSON.parse(window.__adobe_cep__.getHostEnvironment()).appSkinInfo;\n *    // Gets the style information such as color info from the skinInfo,\n *    // and redraw all UI controls of your extension according to the style info.\n * }\n */\nCSInterface.THEME_COLOR_CHANGED_EVENT = \"com.adobe.csxs.events.ThemeColorChanged\";\n\n/** The host environment data object. */\nCSInterface.prototype.hostEnvironment = window.__adobe_cep__ ? JSON.parse(window.__adobe_cep__.getHostEnvironment()) : null;\n\n/** Retrieves information about the host environment in which the\n *  extension is currently running.\n *\n *   @return A \\c #HostEnvironment object.\n */\nCSInterface.prototype.getHostEnvironment = function()\n{\n    this.hostEnvironment = JSON.parse(window.__adobe_cep__.getHostEnvironment());\n    return this.hostEnvironment;\n};\n\n/** Loads binary file created which is located at url asynchronously\n*\n*@param urlName url at which binary file is located. Local files should start with 'file://'\n*@param callback Optional. A callback function that returns after binary is loaded\n\n*@example\n* To create JS binary use command ./cep_compiler test.js test.bin\n* To load JS binary asyncronously\n*   var CSLib = new CSInterface();\n*   CSLib.loadBinAsync(url, function () { });\n*/\nCSInterface.prototype.loadBinAsync = function(urlName,callback)\n{\n    try\n    {\n        var xhr = new XMLHttpRequest();\n        xhr.responseType = 'arraybuffer'; // make response as ArrayBuffer\n        xhr.open('GET', urlName, true);\n        xhr.onerror = function ()\n        {\n  \t\t  console.log(\"Unable to load snapshot from given URL\");\n  \t\t  return false;\n\t\t};\n        xhr.send();\n        xhr.onload = () => {\n            window.__adobe_cep__.loadSnapshot(xhr.response);\n            if (typeof callback === \"function\")\n            {\n                callback();\n            }\n            else if(typeof callback !== \"undefined\")\n            {\n                console.log(\"Provided callback is not a function\");\n            }\n        }\n    }\n    catch(err)\n    {\n        console.log(err);\n        return false;\n    }\n\n\treturn true;\n};\n\n/** Loads binary file created synchronously\n*\n*@param pathName the local path at which binary file is located\n\n*@example\n* To create JS binary use command ./cep_compiler test.js test.bin\n* To load JS binary syncronously\n*   var CSLib = new CSInterface();\n*   CSLib.loadBinSync(path);\n*/\nCSInterface.prototype.loadBinSync  = function(pathName)\n{\n    try\n    {\n        var OSVersion = this.getOSInformation();\n        if(pathName.startsWith(\"file://\"))\n        {\n            if (OSVersion.indexOf(\"Windows\") >= 0)\n            {\n               pathName = pathName.replace(\"file:///\", \"\");\n            }\n            else if (OSVersion.indexOf(\"Mac\") >= 0)\n            {\n                pathName = pathName.replace(\"file://\", \"\");\n            }\n            window.__adobe_cep__.loadSnapshot(pathName);\n            return true;\n        }\n    }\n    catch(err)\n    {\n        console.log(err);\n        return false;\n    }\n    //control should not come here\n    return false;\n};\n\n/** Closes this extension. */\nCSInterface.prototype.closeExtension = function()\n{\n    window.__adobe_cep__.closeExtension();\n};\n\n/**\n * Retrieves a path for which a constant is defined in the system.\n *\n * @param pathType The path-type constant defined in \\c #SystemPath ,\n *\n * @return The platform-specific system path string.\n */\nCSInterface.prototype.getSystemPath = function(pathType)\n{\n    var path = decodeURI(window.__adobe_cep__.getSystemPath(pathType));\n    var OSVersion = this.getOSInformation();\n    if (OSVersion.indexOf(\"Windows\") >= 0)\n    {\n      path = path.replace(\"file:///\", \"\");\n    }\n    else if (OSVersion.indexOf(\"Mac\") >= 0)\n    {\n      path = path.replace(\"file://\", \"\");\n    }\n    return path;\n};\n\n/**\n * Evaluates a JavaScript script, which can use the JavaScript DOM\n * of the host application.\n *\n * @param script    The JavaScript script.\n * @param callback  Optional. A callback function that receives the result of execution.\n *          If execution fails, the callback function receives the error message \\c EvalScript_ErrMessage.\n */\nCSInterface.prototype.evalScript = function(script, callback)\n{\n    if(callback === null || callback === undefined)\n    {\n        callback = function(result){};\n    }\n    window.__adobe_cep__.evalScript(script, callback);\n};\n\n/**\n * Retrieves the unique identifier of the application.\n * in which the extension is currently running.\n *\n * @return The unique ID string.\n */\nCSInterface.prototype.getApplicationID = function()\n{\n    var appId = this.hostEnvironment.appId;\n    return appId;\n};\n\n/**\n * Retrieves host capability information for the application\n * in which the extension is currently running.\n *\n * @return A \\c #HostCapabilities object.\n */\nCSInterface.prototype.getHostCapabilities = function()\n{\n    var hostCapabilities = JSON.parse(window.__adobe_cep__.getHostCapabilities() );\n    return hostCapabilities;\n};\n\n/**\n * Triggers a CEP event programmatically. Yoy can use it to dispatch\n * an event of a predefined type, or of a type you have defined.\n *\n * @param event A \\c CSEvent object.\n */\nCSInterface.prototype.dispatchEvent = function(event)\n{\n    if (typeof event.data == \"object\")\n    {\n        event.data = JSON.stringify(event.data);\n    }\n\n    window.__adobe_cep__.dispatchEvent(event);\n};\n\n/**\n * Registers an interest in a CEP event of a particular type, and\n * assigns an event handler.\n * The event infrastructure notifies your extension when events of this type occur,\n * passing the event object to the registered handler function.\n *\n * @param type     The name of the event type of interest.\n * @param listener The JavaScript handler function or method.\n * @param obj      Optional, the object containing the handler method, if any.\n *         Default is null.\n */\nCSInterface.prototype.addEventListener = function(type, listener, obj)\n{\n    window.__adobe_cep__.addEventListener(type, listener, obj);\n};\n\n/**\n * Removes a registered event listener.\n *\n * @param type      The name of the event type of interest.\n * @param listener  The JavaScript handler function or method that was registered.\n * @param obj       Optional, the object containing the handler method, if any.\n *          Default is null.\n */\nCSInterface.prototype.removeEventListener = function(type, listener, obj)\n{\n    window.__adobe_cep__.removeEventListener(type, listener, obj);\n};\n\n/**\n * Loads and launches another extension, or activates the extension if it is already loaded.\n *\n * @param extensionId       The extension's unique identifier.\n * @param startupParams     Not currently used, pass \"\".\n *\n * @example\n * To launch the extension \"help\" with ID \"HLP\" from this extension, call:\n * <code>requestOpenExtension(\"HLP\", \"\"); </code>\n *\n */\nCSInterface.prototype.requestOpenExtension = function(extensionId, params)\n{\n    window.__adobe_cep__.requestOpenExtension(extensionId, params);\n};\n\n/**\n * Retrieves the list of extensions currently loaded in the current host application.\n * The extension list is initialized once, and remains the same during the lifetime\n * of the CEP session.\n *\n * @param extensionIds  Optional, an array of unique identifiers for extensions of interest.\n *          If omitted, retrieves data for all extensions.\n *\n * @return Zero or more \\c #Extension objects.\n */\nCSInterface.prototype.getExtensions = function(extensionIds)\n{\n    var extensionIdsStr = JSON.stringify(extensionIds);\n    var extensionsStr = window.__adobe_cep__.getExtensions(extensionIdsStr);\n\n    var extensions = JSON.parse(extensionsStr);\n    return extensions;\n};\n\n/**\n * Retrieves network-related preferences.\n *\n * @return A JavaScript object containing network preferences.\n */\nCSInterface.prototype.getNetworkPreferences = function()\n{\n    var result = window.__adobe_cep__.getNetworkPreferences();\n    var networkPre = JSON.parse(result);\n\n    return networkPre;\n};\n\n/**\n * Initializes the resource bundle for this extension with property values\n * for the current application and locale.\n * To support multiple locales, you must define a property file for each locale,\n * containing keyed display-string values for that locale.\n * See localization documentation for Extension Builder and related products.\n *\n * Keys can be in the\n * form <code>key.value=\"localized string\"</code>, for use in HTML text elements.\n * For example, in this input element, the localized \\c key.value string is displayed\n * instead of the empty \\c value string:\n *\n * <code><input type=\"submit\" value=\"\" data-locale=\"key\"/></code>\n *\n * @return An object containing the resource bundle information.\n */\nCSInterface.prototype.initResourceBundle = function()\n{\n    var resourceBundle = JSON.parse(window.__adobe_cep__.initResourceBundle());\n    var resElms = document.querySelectorAll('[data-locale]');\n    for (var n = 0; n < resElms.length; n++)\n    {\n       var resEl = resElms[n];\n       // Get the resource key from the element.\n       var resKey = resEl.getAttribute('data-locale');\n       if (resKey)\n       {\n           // Get all the resources that start with the key.\n           for (var key in resourceBundle)\n           {\n               if (key.indexOf(resKey) === 0)\n               {\n                   var resValue = resourceBundle[key];\n                   if (key.length == resKey.length)\n                   {\n                        resEl.innerHTML = resValue;\n                   }\n                   else if ('.' == key.charAt(resKey.length))\n                   {\n                        var attrKey = key.substring(resKey.length + 1);\n                        resEl[attrKey] = resValue;\n                   }\n               }\n           }\n       }\n    }\n    return resourceBundle;\n};\n\n/**\n * Writes installation information to a file.\n *\n * @return The file path.\n */\nCSInterface.prototype.dumpInstallationInfo = function()\n{\n    return window.__adobe_cep__.dumpInstallationInfo();\n};\n\n/**\n * Retrieves version information for the current Operating System,\n * See http://www.useragentstring.com/pages/Chrome/ for Chrome \\c navigator.userAgent values.\n *\n * @return A string containing the OS version, or \"unknown Operation System\".\n * If user customizes the User Agent by setting CEF command parameter \"--user-agent\", only\n * \"Mac OS X\" or \"Windows\" will be returned.\n */\nCSInterface.prototype.getOSInformation = function()\n{\n    var userAgent = navigator.userAgent;\n\n    if ((navigator.platform == \"Win32\") || (navigator.platform == \"Windows\"))\n    {\n        var winVersion = \"Windows\";\n        var winBit = \"\";\n        if (userAgent.indexOf(\"Windows\") > -1)\n        {\n            if (userAgent.indexOf(\"Windows NT 5.0\") > -1)\n            {\n                winVersion = \"Windows 2000\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 5.1\") > -1)\n            {\n                winVersion = \"Windows XP\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 5.2\") > -1)\n            {\n                winVersion = \"Windows Server 2003\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 6.0\") > -1)\n            {\n                winVersion = \"Windows Vista\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 6.1\") > -1)\n            {\n                winVersion = \"Windows 7\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 6.2\") > -1)\n            {\n                winVersion = \"Windows 8\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 6.3\") > -1)\n            {\n                winVersion = \"Windows 8.1\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 10\") > -1)\n            {\n                winVersion = \"Windows 10\";\n            }\n\n            if (userAgent.indexOf(\"WOW64\") > -1 || userAgent.indexOf(\"Win64\") > -1)\n            {\n                winBit = \" 64-bit\";\n            }\n            else\n            {\n                winBit = \" 32-bit\";\n            }\n        }\n\n        return winVersion + winBit;\n    }\n    else if ((navigator.platform == \"MacIntel\") || (navigator.platform == \"Macintosh\"))\n    {\n        var result = \"Mac OS X\";\n\n        if (userAgent.indexOf(\"Mac OS X\") > -1)\n        {\n            result = userAgent.substring(userAgent.indexOf(\"Mac OS X\"), userAgent.indexOf(\")\"));\n            result = result.replace(/_/g, \".\");\n        }\n\n        return result;\n    }\n\n    return \"Unknown Operation System\";\n};\n\n/**\n * Opens a page in the default system browser.\n *\n * Since 4.2.0\n *\n * @param url  The URL of the page/file to open, or the email address.\n * Must use HTTP/HTTPS/file/mailto protocol. For example:\n *   \"http://www.adobe.com\"\n *   \"https://github.com\"\n *   \"file:///C:/log.txt\"\n *   \"mailto:test@adobe.com\"\n *\n * @return One of these error codes:\\n\n *      <ul>\\n\n *          <li>NO_ERROR - 0</li>\\n\n *          <li>ERR_UNKNOWN - 1</li>\\n\n *          <li>ERR_INVALID_PARAMS - 2</li>\\n\n *          <li>ERR_INVALID_URL - 201</li>\\n\n *      </ul>\\n\n */\nCSInterface.prototype.openURLInDefaultBrowser = function(url)\n{\n    return cep.util.openURLInDefaultBrowser(url);\n};\n\n/**\n * Retrieves extension ID.\n *\n * Since 4.2.0\n *\n * @return extension ID.\n */\nCSInterface.prototype.getExtensionID = function()\n{\n     return window.__adobe_cep__.getExtensionId();\n};\n\n/**\n * Retrieves the scale factor of screen.\n * On Windows platform, the value of scale factor might be different from operating system's scale factor,\n * since host application may use its self-defined scale factor.\n *\n * Since 4.2.0\n *\n * @return One of the following float number.\n *      <ul>\\n\n *          <li> -1.0 when error occurs </li>\\n\n *          <li> 1.0 means normal screen </li>\\n\n *          <li> >1.0 means HiDPI screen </li>\\n\n *      </ul>\\n\n */\nCSInterface.prototype.getScaleFactor = function()\n{\n    return window.__adobe_cep__.getScaleFactor();\n};\n\n/**\n * Retrieves the scale factor of Monitor.\n *\n * Since 8.5.0\n *\n * @return value >= 1.0f\n * only available for windows machine\n */\n if(navigator.appVersion.toLowerCase().indexOf(\"windows\") >= 0) {\n    CSInterface.prototype.getMonitorScaleFactor = function()\n    {\n        return window.__adobe_cep__.getMonitorScaleFactor();\n    };\n}\n\n/**\n * Set a handler to detect any changes of scale factor. This only works on Mac.\n *\n * Since 4.2.0\n *\n * @param handler   The function to be called when scale factor is changed.\n *\n */\nCSInterface.prototype.setScaleFactorChangedHandler = function(handler)\n{\n    window.__adobe_cep__.setScaleFactorChangedHandler(handler);\n};\n\n/**\n * Retrieves current API version.\n *\n * Since 4.2.0\n *\n * @return ApiVersion object.\n *\n */\nCSInterface.prototype.getCurrentApiVersion = function()\n{\n    var apiVersion = JSON.parse(window.__adobe_cep__.getCurrentApiVersion());\n    return apiVersion;\n};\n\n/**\n * Set panel flyout menu by an XML.\n *\n * Since 5.2.0\n *\n * Register a callback function for \"com.adobe.csxs.events.flyoutMenuClicked\" to get notified when a\n * menu item is clicked.\n * The \"data\" attribute of event is an object which contains \"menuId\" and \"menuName\" attributes.\n *\n * Register callback functions for \"com.adobe.csxs.events.flyoutMenuOpened\" and \"com.adobe.csxs.events.flyoutMenuClosed\"\n * respectively to get notified when flyout menu is opened or closed.\n *\n * @param menu     A XML string which describes menu structure.\n * An example menu XML:\n * <Menu>\n *   <MenuItem Id=\"menuItemId1\" Label=\"TestExample1\" Enabled=\"true\" Checked=\"false\"/>\n *   <MenuItem Label=\"TestExample2\">\n *     <MenuItem Label=\"TestExample2-1\" >\n *       <MenuItem Label=\"TestExample2-1-1\" Enabled=\"false\" Checked=\"true\"/>\n *     </MenuItem>\n *     <MenuItem Label=\"TestExample2-2\" Enabled=\"true\" Checked=\"true\"/>\n *   </MenuItem>\n *   <MenuItem Label=\"---\" />\n *   <MenuItem Label=\"TestExample3\" Enabled=\"false\" Checked=\"false\"/>\n * </Menu>\n *\n */\nCSInterface.prototype.setPanelFlyoutMenu = function(menu)\n{\n    if (\"string\" != typeof menu)\n    {\n        return;\n    }\n\n    window.__adobe_cep__.invokeSync(\"setPanelFlyoutMenu\", menu);\n};\n\n/**\n * Updates a menu item in the extension window's flyout menu, by setting the enabled\n * and selection status.\n *\n * Since 5.2.0\n *\n * @param menuItemLabel The menu item label.\n * @param enabled       True to enable the item, false to disable it (gray it out).\n * @param checked       True to select the item, false to deselect it.\n *\n * @return false when the host application does not support this functionality (HostCapabilities.EXTENDED_PANEL_MENU is false).\n *         Fails silently if menu label is invalid.\n *\n * @see HostCapabilities.EXTENDED_PANEL_MENU\n */\nCSInterface.prototype.updatePanelMenuItem = function(menuItemLabel, enabled, checked)\n{\n    var ret = false;\n    if (this.getHostCapabilities().EXTENDED_PANEL_MENU)\n    {\n        var itemStatus = new MenuItemStatus(menuItemLabel, enabled, checked);\n        ret = window.__adobe_cep__.invokeSync(\"updatePanelMenuItem\", JSON.stringify(itemStatus));\n    }\n    return ret;\n};\n\n\n/**\n * Set context menu by XML string.\n *\n * Since 5.2.0\n *\n * There are a number of conventions used to communicate what type of menu item to create and how it should be handled.\n * - an item without menu ID or menu name is disabled and is not shown.\n * - if the item name is \"---\" (three hyphens) then it is treated as a separator. The menu ID in this case will always be NULL.\n * - Checkable attribute takes precedence over Checked attribute.\n * - a PNG icon. For optimal display results please supply a 16 x 16px icon as larger dimensions will increase the size of the menu item.\n     The Chrome extension contextMenus API was taken as a reference.\n     https://developer.chrome.com/extensions/contextMenus\n * - the items with icons and checkable items cannot coexist on the same menu level. The former take precedences over the latter.\n *\n * @param menu      A XML string which describes menu structure.\n * @param callback  The callback function which is called when a menu item is clicked. The only parameter is the returned ID of clicked menu item.\n *\n * @description An example menu XML:\n * <Menu>\n *   <MenuItem Id=\"menuItemId1\" Label=\"TestExample1\" Enabled=\"true\" Checkable=\"true\" Checked=\"false\" Icon=\"./image/small_16X16.png\"/>\n *   <MenuItem Id=\"menuItemId2\" Label=\"TestExample2\">\n *     <MenuItem Id=\"menuItemId2-1\" Label=\"TestExample2-1\" >\n *       <MenuItem Id=\"menuItemId2-1-1\" Label=\"TestExample2-1-1\" Enabled=\"false\" Checkable=\"true\" Checked=\"true\"/>\n *     </MenuItem>\n *     <MenuItem Id=\"menuItemId2-2\" Label=\"TestExample2-2\" Enabled=\"true\" Checkable=\"true\" Checked=\"true\"/>\n *   </MenuItem>\n *   <MenuItem Label=\"---\" />\n *   <MenuItem Id=\"menuItemId3\" Label=\"TestExample3\" Enabled=\"false\" Checkable=\"true\" Checked=\"false\"/>\n * </Menu>\n */\nCSInterface.prototype.setContextMenu = function(menu, callback)\n{\n    if (\"string\" != typeof menu)\n    {\n        return;\n    }\n\n    window.__adobe_cep__.invokeAsync(\"setContextMenu\", menu, callback);\n};\n\n/**\n * Set context menu by JSON string.\n *\n * Since 6.0.0\n *\n * There are a number of conventions used to communicate what type of menu item to create and how it should be handled.\n * - an item without menu ID or menu name is disabled and is not shown.\n * - if the item label is \"---\" (three hyphens) then it is treated as a separator. The menu ID in this case will always be NULL.\n * - Checkable attribute takes precedence over Checked attribute.\n * - a PNG icon. For optimal display results please supply a 16 x 16px icon as larger dimensions will increase the size of the menu item.\n     The Chrome extension contextMenus API was taken as a reference.\n * - the items with icons and checkable items cannot coexist on the same menu level. The former take precedences over the latter.\n     https://developer.chrome.com/extensions/contextMenus\n *\n * @param menu      A JSON string which describes menu structure.\n * @param callback  The callback function which is called when a menu item is clicked. The only parameter is the returned ID of clicked menu item.\n *\n * @description An example menu JSON:\n *\n * {\n *      \"menu\": [\n *          {\n *              \"id\": \"menuItemId1\",\n *              \"label\": \"testExample1\",\n *              \"enabled\": true,\n *              \"checkable\": true,\n *              \"checked\": false,\n *              \"icon\": \"./image/small_16X16.png\"\n *          },\n *          {\n *              \"id\": \"menuItemId2\",\n *              \"label\": \"testExample2\",\n *              \"menu\": [\n *                  {\n *                      \"id\": \"menuItemId2-1\",\n *                      \"label\": \"testExample2-1\",\n *                      \"menu\": [\n *                          {\n *                              \"id\": \"menuItemId2-1-1\",\n *                              \"label\": \"testExample2-1-1\",\n *                              \"enabled\": false,\n *                              \"checkable\": true,\n *                              \"checked\": true\n *                          }\n *                      ]\n *                  },\n *                  {\n *                      \"id\": \"menuItemId2-2\",\n *                      \"label\": \"testExample2-2\",\n *                      \"enabled\": true,\n *                      \"checkable\": true,\n *                      \"checked\": true\n *                  }\n *              ]\n *          },\n *          {\n *              \"label\": \"---\"\n *          },\n *          {\n *              \"id\": \"menuItemId3\",\n *              \"label\": \"testExample3\",\n *              \"enabled\": false,\n *              \"checkable\": true,\n *              \"checked\": false\n *          }\n *      ]\n *  }\n *\n */\nCSInterface.prototype.setContextMenuByJSON = function(menu, callback)\n{\n    if (\"string\" != typeof menu)\n    {\n        return;\n    }\n\n    window.__adobe_cep__.invokeAsync(\"setContextMenuByJSON\", menu, callback);\n};\n\n/**\n * Updates a context menu item by setting the enabled and selection status.\n *\n * Since 5.2.0\n *\n * @param menuItemID    The menu item ID.\n * @param enabled       True to enable the item, false to disable it (gray it out).\n * @param checked       True to select the item, false to deselect it.\n */\nCSInterface.prototype.updateContextMenuItem = function(menuItemID, enabled, checked)\n{\n    var itemStatus = new ContextMenuItemStatus(menuItemID, enabled, checked);\n    ret = window.__adobe_cep__.invokeSync(\"updateContextMenuItem\", JSON.stringify(itemStatus));\n};\n\n/**\n * Get the visibility status of an extension window.\n *\n * Since 6.0.0\n *\n * @return true if the extension window is visible; false if the extension window is hidden.\n */\nCSInterface.prototype.isWindowVisible = function()\n{\n    return window.__adobe_cep__.invokeSync(\"isWindowVisible\", \"\");\n};\n\n/**\n * Resize extension's content to the specified dimensions.\n * 1. Works with modal and modeless extensions in all Adobe products.\n * 2. Extension's manifest min/max size constraints apply and take precedence.\n * 3. For panel extensions\n *    3.1 This works in all Adobe products except:\n *        * Premiere Pro\n *        * Prelude\n *        * After Effects\n *    3.2 When the panel is in certain states (especially when being docked),\n *        it will not change to the desired dimensions even when the\n *        specified size satisfies min/max constraints.\n *\n * Since 6.0.0\n *\n * @param width  The new width\n * @param height The new height\n */\nCSInterface.prototype.resizeContent = function(width, height)\n{\n    window.__adobe_cep__.resizeContent(width, height);\n};\n\n/**\n * Register the invalid certificate callback for an extension.\n * This callback will be triggered when the extension tries to access the web site that contains the invalid certificate on the main frame.\n * But if the extension does not call this function and tries to access the web site containing the invalid certificate, a default error page will be shown.\n *\n * Since 6.1.0\n *\n * @param callback the callback function\n */\nCSInterface.prototype.registerInvalidCertificateCallback = function(callback)\n{\n    return window.__adobe_cep__.registerInvalidCertificateCallback(callback);\n};\n\n/**\n * Register an interest in some key events to prevent them from being sent to the host application.\n *\n * This function works with modeless extensions and panel extensions.\n * Generally all the key events will be sent to the host application for these two extensions if the current focused element\n * is not text input or dropdown,\n * If you want to intercept some key events and want them to be handled in the extension, please call this function\n * in advance to prevent them being sent to the host application.\n *\n * Since 6.1.0\n *\n * @param keyEventsInterest      A JSON string describing those key events you are interested in. A null object or\n                                 an empty string will lead to removing the interest\n *\n * This JSON string should be an array, each object has following keys:\n *\n * keyCode:  [Required] represents an OS system dependent virtual key code identifying\n *           the unmodified value of the pressed key.\n * ctrlKey:  [optional] a Boolean that indicates if the control key was pressed (true) or not (false) when the event occurred.\n * altKey:   [optional] a Boolean that indicates if the alt key was pressed (true) or not (false) when the event occurred.\n * shiftKey: [optional] a Boolean that indicates if the shift key was pressed (true) or not (false) when the event occurred.\n * metaKey:  [optional] (Mac Only) a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occurred.\n *                      On Macintosh keyboards, this is the command key. To detect Windows key on Windows, please use keyCode instead.\n * An example JSON string:\n *\n * [\n *     {\n *         \"keyCode\": 48\n *     },\n *     {\n *         \"keyCode\": 123,\n *         \"ctrlKey\": true\n *     },\n *     {\n *         \"keyCode\": 123,\n *         \"ctrlKey\": true,\n *         \"metaKey\": true\n *     }\n * ]\n *\n */\nCSInterface.prototype.registerKeyEventsInterest = function(keyEventsInterest)\n{\n    return window.__adobe_cep__.registerKeyEventsInterest(keyEventsInterest);\n};\n\n/**\n * Set the title of the extension window.\n * This function works with modal and modeless extensions in all Adobe products, and panel extensions in Photoshop, InDesign, InCopy, Illustrator, Flash Pro and Dreamweaver.\n *\n * Since 6.1.0\n *\n * @param title The window title.\n */\nCSInterface.prototype.setWindowTitle = function(title)\n{\n    window.__adobe_cep__.invokeSync(\"setWindowTitle\", title);\n};\n\n/**\n * Get the title of the extension window.\n * This function works with modal and modeless extensions in all Adobe products, and panel extensions in Photoshop, InDesign, InCopy, Illustrator, Flash Pro and Dreamweaver.\n *\n * Since 6.1.0\n *\n * @return The window title.\n */\nCSInterface.prototype.getWindowTitle = function()\n{\n    return window.__adobe_cep__.invokeSync(\"getWindowTitle\", \"\");\n};\n\n(function(_) {\n  if (typeof module !== \"undefined\" && module.exports) {\n    // commonjs\n    module.exports = _;\n  } else {\n    // browser\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    for (var key in _) {\n      if (hasOwnProperty.call(_, key)) {\n        window[key] = _[key];\n      }\n    }\n  }\n})({\n  CSXSWindowType: CSXSWindowType,\n  Version: Version,\n  VersionBound: VersionBound,\n  VersionRange: VersionRange,\n  Runtime: Runtime,\n  Extension: Extension,\n  CSEvent: CSEvent,\n  SystemPath: SystemPath,\n  ColorType: ColorType,\n  RGBColor: RGBColor,\n  Direction: Direction,\n  GradientStop: GradientStop,\n  GradientColor: GradientColor,\n  UIColor: UIColor,\n  AppSkinInfo: AppSkinInfo,\n  HostEnvironment: HostEnvironment,\n  HostCapabilities: HostCapabilities,\n  ApiVersion: ApiVersion,\n  MenuItemStatus: MenuItemStatus,\n  ContextMenuItemStatus: ContextMenuItemStatus,\n  CSInterface: CSInterface,\n});"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAASA,cAAc,GACvB,CACA;;AAEA;AACAA,cAAc,CAACC,MAAM,GAAG,OAAO;;AAE/B;AACAD,cAAc,CAACE,SAAS,GAAG,UAAU;;AAErC;AACAF,cAAc,CAACG,aAAa,GAAG,aAAa;;AAE5C;AACAC,qBAAqB,GAAG,mBAAmB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAO,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAC7C;EACI,IAAI,CAACH,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,OAAO,GAAGA,OAAO;AAC1B;;AAEA;AACA;AACA;AACA;AACAJ,OAAO,CAACK,OAAO,GAAG,SAAS;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAY,CAACC,OAAO,EAAEC,SAAS,EACxC;EACI,IAAI,CAACD,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACC,SAAS,GAAGA,SAAS;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAY,CAACC,UAAU,EAAEC,UAAU,EAC5C;EACI,IAAI,CAACD,UAAU,GAAGA,UAAU;EAC5B,IAAI,CAACC,UAAU,GAAGA,UAAU;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAO,CAACC,IAAI,EAAEC,YAAY,EACnC;EACI,IAAI,CAACD,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACC,YAAY,GAAGA,YAAY;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtC,WAAW,CAAC3D,SAAS,CAAC2I,uBAAuB,GAAG,UAASC,GAAG,EAC5D;EACI,OAAOC,GAAG,CAACC,IAAI,CAACH,uBAAuB,CAACC,GAAG,CAAC;AAChD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAjF,WAAW,CAAC3D,SAAS,CAAC+I,cAAc,GAAG,YACvC;EACK,OAAOjF,MAAM,CAACC,aAAa,CAACiF,cAAc,EAAE;AACjD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,WAAW,CAAC3D,SAAS,CAACiJ,cAAc,GAAG,YACvC;EACI,OAAOnF,MAAM,CAACC,aAAa,CAACkF,cAAc,EAAE;AAChD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,IAAGV,SAAS,CAAC9F,UAAU,CAACyG,WAAW,EAAE,CAAC3D,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;EAC5D5B,WAAW,CAAC3D,SAAS,CAACmJ,qBAAqB,GAAG,YAC9C;IACI,OAAOrF,MAAM,CAACC,aAAa,CAACoF,qBAAqB,EAAE;EACvD,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxF,WAAW,CAAC3D,SAAS,CAACoJ,4BAA4B,GAAG,UAASC,OAAO,EACrE;EACIvF,MAAM,CAACC,aAAa,CAACqF,4BAA4B,CAACC,OAAO,CAAC;AAC9D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1F,WAAW,CAAC3D,SAAS,CAACsJ,oBAAoB,GAAG,YAC7C;EACI,IAAIC,UAAU,GAAGvF,IAAI,CAACC,KAAK,CAACH,MAAM,CAACC,aAAa,CAACuF,oBAAoB,EAAE,CAAC;EACxE,OAAOC,UAAU;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5F,WAAW,CAAC3D,SAAS,CAACwJ,kBAAkB,GAAG,UAASC,IAAI,EACxD;EACI,IAAI,QAAQ,IAAI,OAAOA,IAAI,EAC3B;IACI;EACJ;EAEA3F,MAAM,CAACC,aAAa,CAAC2F,UAAU,CAAC,oBAAoB,EAAED,IAAI,CAAC;AAC/D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9F,WAAW,CAAC3D,SAAS,CAAC2J,mBAAmB,GAAG,UAASrG,aAAa,EAAEC,OAAO,EAAEC,OAAO,EACpF;EACI,IAAIoG,GAAG,GAAG,KAAK;EACf,IAAI,IAAI,CAACzD,mBAAmB,EAAE,CAACpD,mBAAmB,EAClD;IACI,IAAI8G,UAAU,GAAG,IAAIxG,cAAc,CAACC,aAAa,EAAEC,OAAO,EAAEC,OAAO,CAAC;IACpEoG,GAAG,GAAG9F,MAAM,CAACC,aAAa,CAAC2F,UAAU,CAAC,qBAAqB,EAAE1F,IAAI,CAACuC,SAAS,CAACsD,UAAU,CAAC,CAAC;EAC5F;EACA,OAAOD,GAAG;AACd,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjG,WAAW,CAAC3D,SAAS,CAAC8J,cAAc,GAAG,UAASL,IAAI,EAAEpF,QAAQ,EAC9D;EACI,IAAI,QAAQ,IAAI,OAAOoF,IAAI,EAC3B;IACI;EACJ;EAEA3F,MAAM,CAACC,aAAa,CAACgG,WAAW,CAAC,gBAAgB,EAAEN,IAAI,EAAEpF,QAAQ,CAAC;AACtE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,WAAW,CAAC3D,SAAS,CAACgK,oBAAoB,GAAG,UAASP,IAAI,EAAEpF,QAAQ,EACpE;EACI,IAAI,QAAQ,IAAI,OAAOoF,IAAI,EAC3B;IACI;EACJ;EAEA3F,MAAM,CAACC,aAAa,CAACgG,WAAW,CAAC,sBAAsB,EAAEN,IAAI,EAAEpF,QAAQ,CAAC;AAC5E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,WAAW,CAAC3D,SAAS,CAACiK,qBAAqB,GAAG,UAASvG,UAAU,EAAEH,OAAO,EAAEC,OAAO,EACnF;EACI,IAAIqG,UAAU,GAAG,IAAIpG,qBAAqB,CAACC,UAAU,EAAEH,OAAO,EAAEC,OAAO,CAAC;EACxEoG,GAAG,GAAG9F,MAAM,CAACC,aAAa,CAAC2F,UAAU,CAAC,uBAAuB,EAAE1F,IAAI,CAACuC,SAAS,CAACsD,UAAU,CAAC,CAAC;AAC9F,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAlG,WAAW,CAAC3D,SAAS,CAACkK,eAAe,GAAG,YACxC;EACI,OAAOpG,MAAM,CAACC,aAAa,CAAC2F,UAAU,CAAC,iBAAiB,EAAE,EAAE,CAAC;AACjE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/F,WAAW,CAAC3D,SAAS,CAACmK,aAAa,GAAG,UAASnL,KAAK,EAAEC,MAAM,EAC5D;EACI6E,MAAM,CAACC,aAAa,CAACoG,aAAa,CAACnL,KAAK,EAAEC,MAAM,CAAC;AACrD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA0E,WAAW,CAAC3D,SAAS,CAACoK,kCAAkC,GAAG,UAAS/F,QAAQ,EAC5E;EACI,OAAOP,MAAM,CAACC,aAAa,CAACqG,kCAAkC,CAAC/F,QAAQ,CAAC;AAC5E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,WAAW,CAAC3D,SAAS,CAACqK,yBAAyB,GAAG,UAASC,iBAAiB,EAC5E;EACI,OAAOxG,MAAM,CAACC,aAAa,CAACsG,yBAAyB,CAACC,iBAAiB,CAAC;AAC5E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3G,WAAW,CAAC3D,SAAS,CAACuK,cAAc,GAAG,UAASC,KAAK,EACrD;EACI1G,MAAM,CAACC,aAAa,CAAC2F,UAAU,CAAC,gBAAgB,EAAEc,KAAK,CAAC;AAC5D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA7G,WAAW,CAAC3D,SAAS,CAACyK,cAAc,GAAG,YACvC;EACI,OAAO3G,MAAM,CAACC,aAAa,CAAC2F,UAAU,CAAC,gBAAgB,EAAE,EAAE,CAAC;AAChE,CAAC;AAED,CAAC,UAASgB,CAAC,EAAE;EACX,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,OAAO,EAAE;IACnD;IACAD,MAAM,CAACC,OAAO,GAAGF,CAAC;EACpB,CAAC,MAAM;IACL;IACA,IAAIG,cAAc,GAAGC,MAAM,CAAC9K,SAAS,CAAC6K,cAAc;IACpD,KAAK,IAAI9C,GAAG,IAAI2C,CAAC,EAAE;MACjB,IAAIG,cAAc,CAACE,IAAI,CAACL,CAAC,EAAE3C,GAAG,CAAC,EAAE;QAC/BjE,MAAM,CAACiE,GAAG,CAAC,GAAG2C,CAAC,CAAC3C,GAAG,CAAC;MACtB;IACF;EACF;AACF,CAAC,EAAE;EACDxK,cAAc,EAAEA,cAAc;EAC9BK,OAAO,EAAEA,OAAO;EAChBM,YAAY,EAAEA,YAAY;EAC1BG,YAAY,EAAEA,YAAY;EAC1BG,OAAO,EAAEA,OAAO;EAChBG,SAAS,EAAEA,SAAS;EACpBgB,OAAO,EAAEA,OAAO;EAChBO,UAAU,EAAEA,UAAU;EACtBO,SAAS,EAAEA,SAAS;EACpBI,QAAQ,EAAEA,QAAQ;EAClBK,SAAS,EAAEA,SAAS;EACpBG,YAAY,EAAEA,YAAY;EAC1BG,aAAa,EAAEA,aAAa;EAC5BI,OAAO,EAAEA,OAAO;EAChBG,WAAW,EAAEA,WAAW;EACxBQ,eAAe,EAAEA,eAAe;EAChCO,gBAAgB,EAAEA,gBAAgB;EAClCM,UAAU,EAAEA,UAAU;EACtBC,cAAc,EAAEA,cAAc;EAC9BI,qBAAqB,EAAEA,qBAAqB;EAC5CE,WAAW,EAAEA;AACf,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}